import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:emb_mission/core/widgets/guest_activity_tracker.dart';
import 'package:emb_mission/core/services/user_activity_service.dart';
import 'package:emb_mission/core/services/auth_service.dart';
import 'package:emb_mission/core/services/proactive_data_recovery_service.dart';
import 'package:shared_preferences/shared_preferences.dart';

/// √âcran de test unifi√© pour v√©rifier le suivi des invit√©s ET des utilisateurs connect√©s
class TestActivityTrackingScreen extends ConsumerStatefulWidget {
  const TestActivityTrackingScreen({super.key});

  @override
  ConsumerState<TestActivityTrackingScreen> createState() => _TestActivityTrackingScreenState();
}

class _TestActivityTrackingScreenState extends ConsumerState<TestActivityTrackingScreen> {
  // Donn√©es invit√©
  String? _currentGuestId;
  DateTime? _guestLastActiveTime;
  bool _isGuestActive = false;
  
  // Donn√©es utilisateur connect√©
  String? _currentUserId;
  DateTime? _userLastActiveTime;
  bool _isUserActive = false;
  bool _isUserLoggedIn = false;
  
  // Donn√©es de r√©cup√©ration proactive
  DateTime? _lastProactiveRecovery;
  bool _isProactiveRecoveryEnabled = false;
  
  bool _isLoading = false;

  @override
  void initState() {
    super.initState();
    _loadAllInfo();
  }

  /// Charger toutes les informations
  Future<void> _loadAllInfo() async {
    setState(() {
      _isLoading = true;
    });

    try {
      // Charger les informations invit√©
      _currentGuestId = await GuestService.getOrCreateGuestId();
      _guestLastActiveTime = await GuestService.getLastActiveTime();
      _isGuestActive = await GuestService.isGuestActive();
      
      // Charger les informations utilisateur connect√©
      _currentUserId = ref.read(userIdProvider);
      _isUserLoggedIn = _currentUserId != null;
      if (_isUserLoggedIn) {
        _userLastActiveTime = await UserActivityService.getLastActiveTime();
        _isUserActive = await UserActivityService.isUserActive();
        
        // Charger les informations de r√©cup√©ration proactive
        _lastProactiveRecovery = await ProactiveDataRecoveryService.getLastRecoveryTime();
        _isProactiveRecoveryEnabled = _lastProactiveRecovery != null;
      }
    } catch (e) {
      print('‚ùå Erreur lors du chargement des informations: $e');
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }

  /// Forcer la mise √† jour de l'activit√© invit√©
  Future<void> _forceUpdateGuestActivity() async {
    setState(() {
      _isLoading = true;
    });

    try {
      final success = await GuestService.updateGuestLastActive();
      if (success) {
        await _loadAllInfo();
        
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(
              content: Text('‚úÖ Activit√© invit√© mise √† jour avec succ√®s'),
              backgroundColor: Colors.green,
            ),
          );
        }
      } else {
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(
              content: Text('‚ö†Ô∏è √âchec de la mise √† jour de l\'activit√© invit√©'),
              backgroundColor: Colors.orange,
            ),
          );
        }
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('‚ùå Erreur: $e'),
            backgroundColor: Colors.red,
          ),
        );
      }
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }

  /// Forcer la mise √† jour de l'activit√© utilisateur
  Future<void> _forceUpdateUserActivity() async {
    if (!_isUserLoggedIn || _currentUserId == null) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('‚ÑπÔ∏è Aucun utilisateur connect√©'),
            backgroundColor: Colors.blue,
          ),
        );
      }
      return;
    }

    setState(() {
      _isLoading = true;
    });

    try {
      final success = await UserActivityService.updateUserLastActive(_currentUserId!);
      if (success) {
        await _loadAllInfo();
        
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(
              content: Text('‚úÖ Activit√© utilisateur mise √† jour avec succ√®s'),
              backgroundColor: Colors.green,
            ),
          );
        }
      } else {
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(
              content: Text('‚ö†Ô∏è √âchec de la mise √† jour de l\'activit√© utilisateur'),
              backgroundColor: Colors.orange,
            ),
          );
        }
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('‚ùå Erreur: $e'),
            backgroundColor: Colors.red,
          ),
        );
      }
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }

  /// G√©n√©rer un nouvel ID invit√©
  Future<void> _generateNewGuestId() async {
    setState(() {
      _isLoading = true;
    });

    try {
      await GuestService.clearGuestData();
      _currentGuestId = await GuestService.getOrCreateGuestId();
      await GuestService.updateGuestLastActive();
      await _loadAllInfo();
      
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('üÜî Nouvel ID invit√© g√©n√©r√©'),
            backgroundColor: Colors.blue,
          ),
        );
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('‚ùå Erreur: $e'),
            backgroundColor: Colors.red,
          ),
        );
      }
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }

  /// Nettoyer toutes les donn√©es
  Future<void> _clearAllData() async {
    setState(() {
      _isLoading = true;
    });

    try {
      await GuestService.clearGuestData();
      await UserActivityService.clearUserActivityData();
      
      setState(() {
        _currentGuestId = null;
        _guestLastActiveTime = null;
        _isGuestActive = false;
        _userLastActiveTime = null;
        _isUserActive = false;
      });
      
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('üßπ Toutes les donn√©es supprim√©es'),
            backgroundColor: Colors.grey,
          ),
        );
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('‚ùå Erreur: $e'),
            backgroundColor: Colors.red,
          ),
        );
      }
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }

  /// ‚úÖ NOUVEAU: Simuler la transition invit√© ‚Üí utilisateur connect√©
  Future<void> _simulateGuestToUserTransition() async {
    if (!_isUserLoggedIn) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('‚ÑπÔ∏è Connectez-vous d\'abord pour tester la transition'),
            backgroundColor: Colors.blue,
          ),
        );
      }
      return;
    }

    setState(() {
      _isLoading = true;
    });

    try {
      // Simuler la transition
      if (await GuestService.wasGuest()) {
        await GuestService.completeGuestCleanup();
        
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(
              content: Text('üîÑ Transition invit√© ‚Üí utilisateur simul√©e avec succ√®s'),
              backgroundColor: Colors.green,
            ),
          );
        }
        
        // Recharger les informations
        await _loadAllInfo();
      } else {
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(
              content: Text('‚ÑπÔ∏è Aucun historique invit√© d√©tect√©'),
              backgroundColor: Colors.blue,
            ),
          );
        }
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('‚ùå Erreur lors de la simulation: $e'),
            backgroundColor: Colors.red,
          ),
        );
      }
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }

  /// ‚úÖ NOUVEAU: Force une r√©cup√©ration proactive des donn√©es utilisateur
  Future<void> _forceProactiveRecovery() async {
    if (!_isUserLoggedIn || _currentUserId == null) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('‚ÑπÔ∏è Connectez-vous d\'abord pour tester la r√©cup√©ration proactive'),
            backgroundColor: Colors.blue,
          ),
        );
      }
      return;
    }

    setState(() {
      _isLoading = true;
    });

    try {
      print('üîÑ R√©cup√©ration proactive forc√©e pour: $_currentUserId');
      
      // Effectuer la r√©cup√©ration proactive forc√©e
      final success = await ProactiveDataRecoveryService.forceProactiveRecovery(_currentUserId!);
      
      if (success) {
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(
              content: Text('‚úÖ R√©cup√©ration proactive forc√©e termin√©e avec succ√®s'),
              backgroundColor: Colors.green,
            ),
          );
        }
        
        // Recharger les informations
        await _loadAllInfo();
      } else {
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(
              content: Text('‚ö†Ô∏è √âchec de la r√©cup√©ration proactive forc√©e'),
              backgroundColor: Colors.orange,
            ),
          );
        }
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('‚ùå Erreur lors de la r√©cup√©ration proactive: $e'),
            backgroundColor: Colors.red,
          ),
        );
      }
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Test Suivi d\'Activit√©'),
        backgroundColor: Colors.blue,
        foregroundColor: Colors.white,
        actions: [
          IconButton(
            icon: const Icon(Icons.refresh),
            onPressed: _loadAllInfo,
            tooltip: 'Actualiser',
          ),
        ],
      ),
      body: _isLoading
          ? const Center(child: CircularProgressIndicator())
          : SingleChildScrollView(
              padding: const EdgeInsets.all(16),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  // Informations invit√©
                  _buildInfoCard(
                    title: 'üì± Informations Invit√©',
                    color: Colors.orange,
                    children: [
                      _buildInfoRow('ID Invit√©', _currentGuestId ?? 'Non d√©fini'),
                      _buildInfoRow('Derni√®re Activit√©', _guestLastActiveTime?.toString() ?? 'Jamais'),
                      _buildInfoRow('Statut', _isGuestActive ? 'üü¢ Actif' : 'üü° Inactif'),
                    ],
                  ),
                  
                  const SizedBox(height: 16),
                  
                  // Informations utilisateur connect√©
                  _buildInfoCard(
                    title: 'üë§ Informations Utilisateur Connect√©',
                    color: Colors.blue,
                    children: [
                      _buildInfoRow('Connect√©', _isUserLoggedIn ? '‚úÖ Oui' : '‚ùå Non'),
                      if (_isUserLoggedIn) ...[
                        _buildInfoRow('ID Utilisateur', _currentUserId ?? 'Non d√©fini'),
                        _buildInfoRow('Derni√®re Activit√©', _userLastActiveTime?.toString() ?? 'Jamais'),
                        _buildInfoRow('Statut', _isUserActive ? 'üü¢ Actif' : 'üü° Inactif'),
                      ],
                    ],
                  ),
                  
                  const SizedBox(height: 16),
                  
                  // Informations de r√©cup√©ration proactive
                  _buildInfoCard(
                    title: 'üîÑ Informations R√©cup√©ration Proactive',
                    color: Colors.purple,
                    children: [
                      _buildInfoRow('Activ√©e', _isProactiveRecoveryEnabled ? '‚úÖ Oui' : '‚ùå Non'),
                      if (_isProactiveRecoveryEnabled) ...[
                        _buildInfoRow('Derni√®re R√©cup√©ration', _lastProactiveRecovery?.toString() ?? 'Jamais'),
                        _buildInfoRow('Fr√©quence', 'Toutes les 30 minutes max'),
                        _buildInfoRow('Statut', 'üü¢ Syst√®me actif'),
                      ] else ...[
                        _buildInfoRow('Statut', 'üü° Pas de donn√©es disponibles'),
                      ],
                    ],
                  ),
                  
                  const SizedBox(height: 16),
                  
                  // Actions
                  _buildActionCard(
                    title: 'üîß Actions',
                    children: [
                      _buildActionButton(
                        icon: Icons.update,
                        label: 'Mettre √† jour activit√© invit√©',
                        onPressed: _forceUpdateGuestActivity,
                        color: Colors.orange,
                      ),
                      const SizedBox(height: 8),
                      _buildActionButton(
                        icon: Icons.update,
                        label: 'Mettre √† jour activit√© utilisateur',
                        onPressed: _forceUpdateUserActivity,
                        color: Colors.blue,
                        enabled: _isUserLoggedIn,
                      ),
                      const SizedBox(height: 8),
                      _buildActionButton(
                        icon: Icons.refresh,
                        label: 'G√©n√©rer nouvel ID invit√©',
                        onPressed: _generateNewGuestId,
                        color: Colors.green,
                      ),
                      const SizedBox(height: 8),
                      _buildActionButton(
                        icon: Icons.clear,
                        label: 'Nettoyer toutes les donn√©es',
                        onPressed: _clearAllData,
                        color: Colors.red,
                      ),
                      const SizedBox(height: 8),
                      _buildActionButton(
                        icon: Icons.swap_horiz,
                        label: 'Simuler transition invit√©‚Üíutilisateur',
                        onPressed: _simulateGuestToUserTransition,
                        color: Colors.purple,
                        enabled: _isUserLoggedIn,
                      ),
                      const SizedBox(height: 8),
                      _buildActionButton(
                        icon: Icons.download,
                        label: 'R√©cup√©ration proactive forc√©e',
                        onPressed: _forceProactiveRecovery,
                        color: Colors.indigo,
                        enabled: _isUserLoggedIn,
                      ),
                    ],
                  ),
                  
                  const SizedBox(height: 16),
                  
                  // Logs
                  _buildInfoCard(
                    title: 'üìã Logs',
                    color: Colors.grey,
                    children: [
                      const Text(
                        'V√©rifiez la console pour voir les logs d√©taill√©s du suivi d\'activit√©.',
                        style: TextStyle(fontStyle: FontStyle.italic),
                      ),
                      const SizedBox(height: 8),
                      Text(
                        'Fr√©quence: Invit√©s (5 min) | Utilisateurs (5 min)',
                        style: TextStyle(
                          fontWeight: FontWeight.w500,
                          color: Colors.grey[700],
                        ),
                      ),
                    ],
                  ),
                ],
              ),
            ),
    );
  }

  /// Construire une carte d'information
  Widget _buildInfoCard({
    required String title,
    required List<Widget> children,
    Color? color,
  }) {
    return Card(
      elevation: 2,
      color: color?.withOpacity(0.1),
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              title,
              style: TextStyle(
                fontSize: 18,
                fontWeight: FontWeight.bold,
                color: color,
              ),
            ),
            const SizedBox(height: 12),
            ...children,
          ],
        ),
      ),
    );
  }

  /// Construire une carte d'actions
  Widget _buildActionCard({
    required String title,
    required List<Widget> children,
  }) {
    return Card(
      elevation: 2,
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              title,
              style: const TextStyle(
                fontSize: 18,
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: 12),
            ...children,
          ],
        ),
      ),
    );
  }

  /// Construire une ligne d'information
  Widget _buildInfoRow(String label, String value) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 4),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          SizedBox(
            width: 120,
            child: Text(
              '$label :',
              style: const TextStyle(fontWeight: FontWeight.w500),
            ),
          ),
          Expanded(
            child: Text(
              value,
              style: const TextStyle(fontFamily: 'monospace'),
            ),
          ),
        ],
      ),
    );
  }

  /// Construire un bouton d'action
  Widget _buildActionButton({
    required IconData icon,
    required String label,
    required VoidCallback onPressed,
    required Color color,
    bool enabled = true,
  }) {
    return SizedBox(
      width: double.infinity,
      child: ElevatedButton.icon(
        onPressed: enabled ? onPressed : null,
        icon: Icon(icon, color: enabled ? Colors.white : Colors.grey),
        label: Text(
          label, 
          style: TextStyle(color: enabled ? Colors.white : Colors.grey)
        ),
        style: ElevatedButton.styleFrom(
          backgroundColor: enabled ? color : Colors.grey[400],
          padding: const EdgeInsets.symmetric(vertical: 12),
        ),
      ),
    );
  }
}
