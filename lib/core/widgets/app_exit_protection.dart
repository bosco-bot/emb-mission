import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:emb_mission/core/services/app_exit_service.dart';

/// Widget wrapper qui prot√®ge l'application contre la fermeture accidentelle
/// Utilise WillPopScope pour intercepter le bouton retour du t√©l√©phone
class AppExitProtection extends ConsumerWidget {
  final Widget child;
  final bool enableProtection;

  const AppExitProtection({
    super.key,
    required this.child,
    this.enableProtection = true,
  });

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    if (!enableProtection) {
      return child;
    }

    return WillPopScope(
      onWillPop: () async {
        print('üîô Bouton retour press√© - v√©rification de sortie...');
        
        // Utiliser le service centralis√© pour v√©rifier si la sortie est autoris√©e
        final appExitService = ref.read(appExitServiceProvider);
        final canExit = await appExitService.canExitApp(context, ref);
        
        if (canExit) {
          print('‚úÖ Sortie autoris√©e - l\'app va en arri√®re-plan');
          // ‚úÖ CRITIQUE: Ne pas fermer compl√®tement l'app, juste la mettre en arri√®re-plan
          // L'app restera active gr√¢ce aux services en arri√®re-plan
        } else {
          print('‚ùå Sortie bloqu√©e - l\'app reste active');
        }
        
        return canExit;
      },
      child: child,
    );
  }
}

/// Version avanc√©e avec protection conditionnelle
class ConditionalAppExitProtection extends ConsumerWidget {
  final Widget child;
  final Future<bool> Function()? customExitCheck;
  final bool Function()? shouldProtect;

  const ConditionalAppExitProtection({
    super.key,
    required this.child,
    this.customExitCheck,
    this.shouldProtect,
  });

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    return WillPopScope(
      onWillPop: () async {
        // 1. V√©rifier si la protection doit √™tre active
        if (shouldProtect != null && !shouldProtect!()) {
          return true; // Pas de protection, autoriser la sortie
        }

        // 2. Utiliser une v√©rification personnalis√©e si fournie
        if (customExitCheck != null) {
          return await customExitCheck!();
        }

        // 3. Utiliser le service centralis√© par d√©faut
        final appExitService = ref.read(appExitServiceProvider);
        return await appExitService.canExitApp(context, ref);
      },
      child: child,
    );
  }
}

/// Hook pour utiliser la protection de sortie dans n'importe quel widget
mixin AppExitProtectionMixin<T extends StatefulWidget> on State<T> {
  Future<bool> onWillPop() async {
    // Cette m√©thode peut √™tre override par les widgets enfants
    // pour impl√©menter une logique de protection sp√©cifique
    return true;
  }

  Widget wrapWithExitProtection(Widget child) {
    return WillPopScope(
      onWillPop: onWillPop,
      child: child,
    );
  }
}
