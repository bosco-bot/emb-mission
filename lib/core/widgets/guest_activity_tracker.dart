import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:http/http.dart' as http;
import 'dart:async';
import 'dart:convert';

/// Service pour g√©rer les invit√©s anonymes
class GuestService {
  static const _guestIdKey = 'guest_id';
  static const _lastActiveKey = 'guest_last_active';
  static const _baseUrl = 'https://embmission.com/mobileappebm/api';

  /// R√©cup√®re ou g√©n√®re un guestId unique pour l'invit√©
  static Future<String> getOrCreateGuestId() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      String? guestId = prefs.getString(_guestIdKey);
      
      if (guestId == null || guestId.isEmpty) {
        // G√©n√©rer un nouvel ID unique
        guestId = _generateUniqueId();
        await prefs.setString(_guestIdKey, guestId);
        print('üÜî Nouvel ID invit√© g√©n√©r√©: $guestId');
      }
      
      return guestId;
    } catch (e) {
      print('‚ùå Erreur lors de la r√©cup√©ration/cr√©ation de l\'ID invit√©: $e');
      // Fallback: g√©n√©rer un ID temporaire
      return _generateUniqueId();
    }
  }

  /// G√©n√®re un ID unique bas√© sur le timestamp et un nombre al√©atoire
  static String _generateUniqueId() {
    final timestamp = DateTime.now().millisecondsSinceEpoch;
    final random = (timestamp % 1000000).toString().padLeft(6, '0');
    return 'guest_${timestamp}_$random';
  }

  /// Met √† jour le last_active de l'invit√© c√¥t√© backend
  static Future<bool> updateGuestLastActive() async {
    try {
      final guestId = await getOrCreateGuestId();
      final url = Uri.parse('$_baseUrl/update_guest_last_active?guestId=$guestId');
      
      print('üîÑ Mise √† jour de l\'activit√© invit√©: $guestId');
      
      final response = await http.get(url).timeout(
        const Duration(seconds: 10),
        onTimeout: () {
          throw TimeoutException('Timeout lors de la mise √† jour de l\'activit√© invit√©');
        },
      );
      
      if (response.statusCode == 200) {
        // Sauvegarder le timestamp de la derni√®re mise √† jour
        final prefs = await SharedPreferences.getInstance();
        await prefs.setString(_lastActiveKey, DateTime.now().toIso8601String());
        
        print('‚úÖ Activit√© invit√© mise √† jour avec succ√®s');
        return true;
      } else {
        print('‚ö†Ô∏è Erreur serveur lors de la mise √† jour de l\'activit√© invit√©: ${response.statusCode}');
        return false;
      }
    } catch (e) {
      print('‚ùå Erreur lors de la mise √† jour de l\'activit√© invit√©: $e');
      return false;
    }
  }

  /// R√©cup√®re le timestamp de la derni√®re activit√©
  static Future<DateTime?> getLastActiveTime() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final lastActive = prefs.getString(_lastActiveKey);
      if (lastActive != null) {
        return DateTime.parse(lastActive);
      }
      return null;
    } catch (e) {
      print('‚ùå Erreur lors de la r√©cup√©ration du timestamp d\'activit√©: $e');
      return null;
    }
  }

  /// V√©rifie si l'invit√© est actif (derni√®re activit√© < 1 heure)
  static Future<bool> isGuestActive() async {
    try {
      final lastActive = await getLastActiveTime();
      if (lastActive == null) return false;
      
      final difference = DateTime.now().difference(lastActive);
      return difference.inHours < 1;
    } catch (e) {
      print('‚ùå Erreur lors de la v√©rification de l\'activit√© invit√©: $e');
      return false;
    }
  }

  /// Nettoie les donn√©es invit√© (pour la d√©connexion ou transition vers utilisateur connect√©)
  static Future<void> clearGuestData() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.remove(_guestIdKey);
      await prefs.remove(_lastActiveKey);
      print('üßπ Donn√©es invit√© supprim√©es');
    } catch (e) {
      print('‚ùå Erreur lors de la suppression des donn√©es invit√©: $e');
    }
  }

  /// V√©rifie si l'utilisateur √©tait un invit√© avant la connexion
  static Future<bool> wasGuest() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final guestId = prefs.getString(_guestIdKey);
      return guestId != null && guestId.isNotEmpty;
    } catch (e) {
      print('‚ùå Erreur lors de la v√©rification du statut invit√©: $e');
      return false;
    }
  }

  /// Nettoie compl√®tement les donn√©es invit√© et arr√™te le suivi
  static Future<void> completeGuestCleanup() async {
    try {
      await clearGuestData();
      print('‚úÖ Nettoyage complet des donn√©es invit√© termin√©');
    } catch (e) {
      print('‚ùå Erreur lors du nettoyage complet des donn√©es invit√©: $e');
    }
  }
}

/// Widget pour suivre l'activit√© des invit√©s
class GuestActivityTracker extends StatefulWidget {
  final Widget child;
  
  const GuestActivityTracker({
    required this.child,
    super.key,
  });

  @override
  State<GuestActivityTracker> createState() => _GuestActivityTrackerState();
}

class _GuestActivityTrackerState extends State<GuestActivityTracker> 
    with WidgetsBindingObserver {
  Timer? _activityTimer;
  Timer? _statusTimer;
  bool _isTracking = false;
  String? _currentGuestId;

  @override
  void initState() {
    super.initState();
    WidgetsBinding.instance.addObserver(this);
    _initializeTracking();
  }

  @override
  void dispose() {
    WidgetsBinding.instance.removeObserver(this);
    _activityTimer?.cancel();
    _statusTimer?.cancel();
    super.dispose();
  }

  /// Initialise le suivi d'activit√©
  Future<void> _initializeTracking() async {
    try {
      // R√©cup√©rer l'ID invit√©
      _currentGuestId = await GuestService.getOrCreateGuestId();
      
      // Premi√®re mise √† jour imm√©diate
      await GuestService.updateGuestLastActive();
      
      // D√©marrer le timer de mise √† jour (toutes les 5 minutes)
      _activityTimer = Timer.periodic(const Duration(minutes: 5), (_) {
        _updateGuestActivity();
      });
      
      // D√©marrer le timer de statut (toutes les 30 secondes)
      _statusTimer = Timer.periodic(const Duration(seconds: 30), (_) {
        _checkGuestStatus();
      });
      
      setState(() {
        _isTracking = true;
      });
      
      print('üöÄ Suivi d\'activit√© invit√© initialis√© pour: $_currentGuestId');
    } catch (e) {
      print('‚ùå Erreur lors de l\'initialisation du suivi invit√©: $e');
    }
  }

  /// Met √† jour l'activit√© de l'invit√©
  Future<void> _updateGuestActivity() async {
    if (!mounted) return;
    
    try {
      final success = await GuestService.updateGuestLastActive();
      if (success) {
        print('‚úÖ Activit√© invit√© mise √† jour: ${DateTime.now().toIso8601String()}');
      } else {
        print('‚ö†Ô∏è √âchec de la mise √† jour de l\'activit√© invit√©');
      }
    } catch (e) {
      print('‚ùå Erreur lors de la mise √† jour de l\'activit√© invit√©: $e');
    }
  }

  /// V√©rifie le statut de l'invit√©
  Future<void> _checkGuestStatus() async {
    if (!mounted) return;
    
    try {
      final isActive = await GuestService.isGuestActive();
      if (isActive) {
        print('üü¢ Invit√© actif: $_currentGuestId');
      } else {
        print('üü° Invit√© inactif: $_currentGuestId');
      }
    } catch (e) {
      print('‚ùå Erreur lors de la v√©rification du statut invit√©: $e');
    }
  }

  @override
  void didChangeAppLifecycleState(AppLifecycleState state) {
    super.didChangeAppLifecycleState(state);
    
    switch (state) {
      case AppLifecycleState.resumed:
        // App reprise: mettre √† jour l'activit√©
        _updateGuestActivity();
        break;
      case AppLifecycleState.paused:
      case AppLifecycleState.inactive:
      case AppLifecycleState.detached:
        // App en pause: pas de mise √† jour automatique
        break;
      case AppLifecycleState.hidden:
        // Nouveau dans Flutter 3.16+
        break;
    }
  }

  @override
  Widget build(BuildContext context) {
    return widget.child;
  }
}

/// Mixin pour ajouter le suivi d'activit√© invit√© aux √©crans
mixin GuestActivityMixin<T extends StatefulWidget> on State<T> {
  Timer? _guestActivityTimer;

  /// D√©marrer le suivi d'activit√© pour cet √©cran
  void startGuestActivityTracking() {
    _guestActivityTimer = Timer.periodic(const Duration(minutes: 2), (_) {
      GuestService.updateGuestLastActive();
    });
  }

  /// Arr√™ter le suivi d'activit√© pour cet √©cran
  void stopGuestActivityTracking() {
    _guestActivityTimer?.cancel();
    _guestActivityTimer = null;
  }

  @override
  void dispose() {
    stopGuestActivityTracking();
    super.dispose();
  }
}
