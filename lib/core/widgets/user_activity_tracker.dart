import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:emb_mission/core/services/user_activity_service.dart';
import 'package:emb_mission/core/services/auth_service.dart';
import 'package:emb_mission/core/widgets/guest_activity_tracker.dart';
import 'dart:async';

/// Widget pour suivre l'activit√© des utilisateurs connect√©s
class UserActivityTracker extends ConsumerStatefulWidget {
  final Widget child;
  
  const UserActivityTracker({
    required this.child,
    super.key,
  });

  @override
  ConsumerState<UserActivityTracker> createState() => _UserActivityTrackerState();
}

class _UserActivityTrackerState extends ConsumerState<UserActivityTracker> 
    with WidgetsBindingObserver {
  Timer? _activityTimer;
  Timer? _statusTimer;
  bool _isTracking = false;
  String? _currentUserId;
  bool _isUserLoggedIn = false;

  @override
  void initState() {
    super.initState();
    WidgetsBinding.instance.addObserver(this);
    _initializeTracking();
  }

  @override
  void dispose() {
    WidgetsBinding.instance.removeObserver(this);
    _activityTimer?.cancel();
    _statusTimer?.cancel();
    super.dispose();
  }

  /// Initialise le suivi d'activit√©
  Future<void> _initializeTracking() async {
    try {
      // V√©rifier si un utilisateur est connect√©
      final userId = ref.read(userIdProvider);
      _isUserLoggedIn = userId != null;
      _currentUserId = userId;
      
      if (_isUserLoggedIn && _currentUserId != null) {
        // ‚úÖ NOUVEAU: V√©rifier si l'utilisateur √©tait un invit√© et nettoyer
        await _handleGuestToUserTransition();
        
        // Premi√®re mise √† jour imm√©diate
        await UserActivityService.updateUserLastActive(_currentUserId!);
        
        // D√©marrer le timer de mise √† jour (toutes les 5 minutes)
        _activityTimer = Timer.periodic(const Duration(minutes: 5), (_) {
          _updateUserActivity();
        });
        
        // D√©marrer le timer de statut (toutes les 30 secondes)
        _statusTimer = Timer.periodic(const Duration(seconds: 30), (_) {
          _checkUserStatus();
        });
        
        setState(() {
          _isTracking = true;
        });
        
        print('üöÄ Suivi d\'activit√© utilisateur initialis√© pour: $_currentUserId');
      } else {
        print('‚ÑπÔ∏è Aucun utilisateur connect√©, suivi d\'activit√© d√©sactiv√©');
      }
    } catch (e) {
      print('‚ùå Erreur lors de l\'initialisation du suivi utilisateur: $e');
    }
  }

  /// Met √† jour l'activit√© de l'utilisateur
  Future<void> _updateUserActivity() async {
    if (!mounted) return;
    
    try {
      // V√©rifier si l'utilisateur est toujours connect√©
      final currentUserId = ref.read(userIdProvider);
      if (currentUserId == null || currentUserId != _currentUserId) {
        print('‚ÑπÔ∏è Utilisateur d√©connect√© ou chang√©, arr√™t du suivi');
        _stopTracking();
        return;
      }
      
      // V√©rifier si une mise √† jour est n√©cessaire
      if (await UserActivityService.shouldUpdateActivity(currentUserId)) {
        final success = await UserActivityService.updateUserLastActive(currentUserId);
        if (success) {
          print('‚úÖ Activit√© utilisateur mise √† jour: ${DateTime.now().toIso8601String()}');
        } else {
          print('‚ö†Ô∏è √âchec de la mise √† jour de l\'activit√© utilisateur');
        }
      } else {
        print('‚ÑπÔ∏è Mise √† jour de l\'activit√© utilisateur non n√©cessaire');
      }
    } catch (e) {
      print('‚ùå Erreur lors de la mise √† jour de l\'activit√© utilisateur: $e');
    }
  }

  /// V√©rifie le statut de l'utilisateur
  Future<void> _checkUserStatus() async {
    if (!mounted) return;
    
    try {
      final currentUserId = ref.read(userIdProvider);
      if (currentUserId == null || currentUserId != _currentUserId) {
        print('‚ÑπÔ∏è Utilisateur d√©connect√© ou chang√©, arr√™t du suivi');
        _stopTracking();
        return;
      }
      
      final isActive = await UserActivityService.isUserActive();
      if (isActive) {
        print('üü¢ Utilisateur actif: $_currentUserId');
      } else {
        print('üü° Utilisateur inactif: $_currentUserId');
      }
    } catch (e) {
      print('‚ùå Erreur lors de la v√©rification du statut utilisateur: $e');
    }
  }

  /// Arr√™te le suivi d'activit√©
  void _stopTracking() {
    _activityTimer?.cancel();
    _statusTimer?.cancel();
    setState(() {
      _isTracking = false;
      _currentUserId = null;
      _isUserLoggedIn = false;
    });
    print('üõë Suivi d\'activit√© utilisateur arr√™t√©');
  }

  /// ‚úÖ NOUVEAU: G√®re la d√©connexion et le nettoyage
  Future<void> handleUserLogout() async {
    try {
      print('üîì D√©connexion utilisateur d√©tect√©e');
      
      // Arr√™ter le suivi
      _stopTracking();
      
      // Nettoyer les donn√©es d'activit√© utilisateur
      await UserActivityService.clearUserActivityData();
      
      print('‚úÖ Nettoyage post-d√©connexion termin√©');
      print('üìä L\'utilisateur peut redevenir invit√© si n√©cessaire');
    } catch (e) {
      print('‚ùå Erreur lors du nettoyage post-d√©connexion: $e');
    }
  }

  /// Red√©marre le suivi d'activit√©
  Future<void> _restartTracking() async {
    _stopTracking();
    await _initializeTracking();
  }

  /// ‚úÖ NOUVEAU: G√®re la transition invit√© ‚Üí utilisateur connect√©
  Future<void> _handleGuestToUserTransition() async {
    try {
      // V√©rifier si l'utilisateur √©tait un invit√©
      final wasGuest = await GuestService.wasGuest();
      
      if (wasGuest) {
        print('üîÑ Transition d√©tect√©e: Invit√© ‚Üí Utilisateur connect√©');
        print('üßπ Nettoyage des donn√©es invit√© pour: $_currentUserId');
        
        // Nettoyer compl√®tement les donn√©es invit√©
        await GuestService.completeGuestCleanup();
        
        print('‚úÖ Transition invit√© ‚Üí utilisateur termin√©e avec succ√®s');
        print('üìä L\'utilisateur n\'est plus compt√© parmi les invit√©s');
      } else {
        print('‚ÑπÔ∏è Utilisateur connect√© directement (pas d\'historique invit√©)');
      }
    } catch (e) {
      print('‚ùå Erreur lors de la gestion de la transition invit√© ‚Üí utilisateur: $e');
    }
  }

  @override
  void didChangeAppLifecycleState(AppLifecycleState state) {
    super.didChangeAppLifecycleState(state);
    
    switch (state) {
      case AppLifecycleState.resumed:
        // App reprise: v√©rifier la connexion et mettre √† jour l'activit√©
        _handleAppResumed();
        break;
      case AppLifecycleState.paused:
      case AppLifecycleState.inactive:
      case AppLifecycleState.detached:
        // App en pause: pas de mise √† jour automatique
        break;
      case AppLifecycleState.hidden:
        // Nouveau dans Flutter 3.16+
        break;
    }
  }

  /// G√®re la reprise de l'application
  Future<void> _handleAppResumed() async {
    try {
      final currentUserId = ref.read(userIdProvider);
      
      // Si l'utilisateur vient de se connecter
      if (currentUserId != null && !_isUserLoggedIn) {
        print('üîê Utilisateur connect√©, d√©marrage du suivi d\'activit√©');
        await _restartTracking();
      }
      // Si l'utilisateur vient de se d√©connecter
      else if (currentUserId == null && _isUserLoggedIn) {
        print('üîì Utilisateur d√©connect√©, arr√™t du suivi d\'activit√©');
        _stopTracking();
      }
      // Si l'utilisateur est toujours connect√©, mettre √† jour l'activit√©
      else if (currentUserId != null && _isUserLoggedIn) {
        await _updateUserActivity();
      }
    } catch (e) {
      print('‚ùå Erreur lors de la gestion de la reprise de l\'app: $e');
    }
  }

  @override
  Widget build(BuildContext context) {
    return widget.child;
  }
}

/// Mixin pour ajouter le suivi d'activit√© utilisateur aux √©crans
mixin UserActivityMixin<T extends ConsumerStatefulWidget> on ConsumerState<T> {
  Timer? _userActivityTimer;

  /// D√©marrer le suivi d'activit√© pour cet √©cran
  void startUserActivityTracking() {
    final userId = ref.read(userIdProvider);
    if (userId != null) {
      _userActivityTimer = Timer.periodic(const Duration(minutes: 2), (_) {
        UserActivityService.updateUserLastActive(userId);
      });
      print('üöÄ Suivi d\'activit√© utilisateur d√©marr√© pour l\'√©cran: $userId');
    }
  }

  /// Arr√™ter le suivi d'activit√© pour cet √©cran
  void stopUserActivityTracking() {
    _userActivityTimer?.cancel();
    _userActivityTimer = null;
    print('üõë Suivi d\'activit√© utilisateur arr√™t√© pour l\'√©cran');
  }

  @override
  void dispose() {
    stopUserActivityTracking();
    super.dispose();
  }
}
