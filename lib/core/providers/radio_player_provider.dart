import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:just_audio/just_audio.dart';
import 'package:audio_service/audio_service.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'dart:async';
import 'package:emb_mission/core/services/android_background_service.dart';
import 'package:emb_mission/core/services/background_maintenance_service.dart';
import 'package:emb_mission/core/services/screen_wake_service.dart';

// Provider global pour l'instance du player radio
final radioPlayerProvider = Provider<AudioPlayer>((ref) {
  return AudioPlayer();
});

// üö® NOUVEAU: Provider global pour arr√™ter TOUS les players radio
final radioStopAllProvider = StateNotifierProvider<RadioStopAllNotifier, bool>((ref) {
  return RadioStopAllNotifier(
    ref.read(radioPlayerProvider),
    ref.read(radioPlayingProvider.notifier),
  );
});

// üö® NOUVEAU: Notifier pour arr√™ter TOUS les players radio
class RadioStopAllNotifier extends StateNotifier<bool> {
  final AudioPlayer _player;
  final RadioPlayingNotifier _radioPlayingNotifier;
  
  RadioStopAllNotifier(this._player, this._radioPlayingNotifier) : super(false);
  
  // M√©thode pour d√©clencher l'arr√™t global
  Future<void> stopAllRadio() async {
    print('[RADIO STOP ALL] Arr√™t global de tous les players radio...');
    
    try {
      // 1. Arr√™ter le player principal
      if (_player.playing) {
        await _player.stop();
        print('[RADIO STOP ALL] Player principal arr√™t√©');
      }
      
      // 2. Arr√™ter AudioService
      try {
        await AudioService.stop();
        print('[RADIO STOP ALL] AudioService arr√™t√©');
      } catch (e) {
        print('[RADIO STOP ALL] Erreur arr√™t AudioService: $e');
      }
      
      // 3. Mettre √† jour l'√©tat global
      _radioPlayingNotifier.updatePlayingState(false);
      print('[RADIO STOP ALL] √âtat global mis √† jour: false');
      
      // 4. üö® NOUVEAU: D√©clencher le signal pour arr√™ter les players en cache
      state = !state; // Changer l'√©tat pour d√©clencher le listener
      
      print('[RADIO STOP ALL] Signal envoy√© pour arr√™ter les players en cache TURBO');
      print('[RADIO STOP ALL] Tous les players radio arr√™t√©s avec succ√®s');
      
    } catch (e) {
      print('[RADIO STOP ALL] Erreur lors de l\'arr√™t global: $e');
    }
  }
  
  // üö® NOUVELLE M√âTHODE: Arr√™ter sp√©cifiquement les players en cache TURBO
  Future<void> stopCachedPlayers() async {
    print('[RADIO STOP ALL] Arr√™t des players en cache TURBO...');
    
    try {
      // Cette m√©thode sera appel√©e depuis RadioScreen
      // pour arr√™ter ses players en cache
      print('[RADIO STOP ALL] Signal d\'arr√™t des players en cache envoy√©');
      
    } catch (e) {
      print('[RADIO STOP ALL] Erreur lors de l\'arr√™t des players en cache: $e');
    }
  }
}

class RadioPlayingNotifier extends StateNotifier<bool> {
  final AudioPlayer player;
  late final Stream<bool> _playingStream;
  late final StreamSubscription<bool> _sub;
  bool _audioServiceInitialized = false;
  
  // ‚úÖ NOUVEAU: Service de wake lock pour emp√™cher la mise en veille
  final ScreenWakeService _screenWakeService = ScreenWakeService();

  RadioPlayingNotifier(this.player) : super(false) {
    _playingStream = player.playingStream;
    _sub = _playingStream.listen(
      (playing) {
        try {
          print('[RADIO PROVIDER] √âtat de lecture chang√©: $playing');
          if (mounted) {
            state = playing;
          }
        } catch (e) {
          print('[RADIO PROVIDER] ‚ùå Erreur dans le listener playingStream: $e');
          // Ne pas faire planter le StateNotifier
        }
      },
      onError: (error) {
        print('[RADIO PROVIDER] ‚ùå Erreur dans le stream playingStream: $error');
        // Ne pas faire planter le StateNotifier
      },
    );
    _initAudioService();
  }

  @override
  void dispose() {
    _sub.cancel();
    super.dispose();
  }

  // M√©thode pour forcer la mise √† jour de l'√©tat
  void updatePlayingState(bool isPlaying) {
    try {
      print('[RADIO PROVIDER] Mise √† jour forc√©e de l\'√©tat: $isPlaying');
      if (mounted) {
        state = isPlaying;
      }
    } catch (e) {
      print('[RADIO PROVIDER] ‚ùå Erreur lors de updatePlayingState: $e');
      // Ne pas faire planter le StateNotifier
    }
  }

  // ‚úÖ OPTIMISATION: AudioService d√©j√† initialis√© dans main.dart
  // Pas besoin de r√©initialiser ici pour √©viter les conflits
  Future<void> _initAudioService() async {
    try {
      print('[RADIO PROVIDER] AudioService d√©j√† initialis√© dans main.dart');
      _audioServiceInitialized = true;
    } catch (e) {
      print('[RADIO PROVIDER] Erreur lors de la v√©rification AudioService: $e');
    }
  }

  // M√©thode pour d√©marrer la radio
  Future<void> startRadio(String url, String radioName) async {
    print('[RADIO PROVIDER DEBUG] startRadio() appel√© avec URL: $url');
    print('[RADIO PROVIDER DEBUG] üö® ATTENTION: Cette m√©thode d√©marre le service Android ET affiche la notification');
    try {
      // Arr√™ter le player actuel s'il joue
      if (player.playing) {
        print('[RADIO PROVIDER DEBUG] Player en cours de lecture, arr√™t...');
        await player.stop();
      }

      print('[RADIO PROVIDER DEBUG] Configuration de l\'URL: $url');
      
      // ‚úÖ NOUVELLE OPTIMISATION: Configuration audio ultra-rapide
      await player.setUrl(url);
      print('[RADIO PROVIDER DEBUG] URL configur√©e, d√©marrage IMM√âDIAT de la lecture...');
      
      // ‚úÖ OPTIMISATION: Configuration audio minimale pour la performance
      await player.setVolume(1.0);
      await player.setSpeed(1.0); // ‚úÖ Correction: setSpeed au lieu de setPlaybackRate
      
      // D√©marrer la lecture imm√©diatement
      await player.play();
      print('[RADIO PROVIDER DEBUG] Lecture d√©marr√©e imm√©diatement');
      
      // Mettre √† jour l'√©tat
      updatePlayingState(true);
      print('[RADIO PROVIDER] Radio d√©marr√©e avec succ√®s: $url');
      
      // ‚úÖ NOUVEAU: Activer le wake lock pour emp√™cher la mise en veille
      try {
        await _screenWakeService.enable();
        print('[RADIO PROVIDER] ‚úÖ Wake lock activ√© pour emp√™cher la mise en veille');
      } catch (e) {
        print('[RADIO PROVIDER] ‚ö†Ô∏è Erreur activation wake lock: $e');
      }
      
      // ‚úÖ NOUVEAU: D√©marrer le service Android avec notification
      try {
        print('[RADIO PROVIDER] ‚ö° D√âBUT - Tentative de d√©marrage du service Android...');
        await AndroidBackgroundService.startNativeService();
        print('[RADIO PROVIDER] ‚úÖ Service Android d√©marr√© avec succ√®s');
        
        // ‚úÖ NOUVEAU: D√©marrer le service de maintenance en arri√®re-plan
        try {
          await BackgroundMaintenanceService().start();
          print('[RADIO PROVIDER] ‚úÖ Service de maintenance d√©marr√© avec succ√®s');
        } catch (e) {
          print('[RADIO PROVIDER] ‚ö†Ô∏è Erreur d√©marrage service maintenance: $e');
        }
        
        // ‚úÖ NOUVEAU: Synchroniser l'√©tat avec Android (radio d√©marr√©e)
        const channel = MethodChannel('com.embmission.android_background');
        
        try {
          await channel.invokeMethod('updateRadioState', true);
          print('[RADIO PROVIDER] ‚úÖ √âtat radio synchronis√© avec Android: true (d√©marrage)');
        } catch (syncError) {
          print('[RADIO PROVIDER] ‚ö†Ô∏è Erreur synchronisation √©tat (d√©marrage): $syncError');
        }
        
        // ‚úÖ FORCER l'affichage de la notification via MethodChannel direct
        print('[RADIO PROVIDER] ‚ö° D√âBUT - Tentative de for√ßage de notification...');
        try {
          final result = await channel.invokeMethod('showNotification');
          print('[RADIO PROVIDER] ‚úÖ Notification forc√©e via MethodChannel - R√©sultat: $result');
        } catch (notifError) {
          print('[RADIO PROVIDER] ‚ùå Erreur notification: $notifError');
          print('[RADIO PROVIDER] ‚ùå Type erreur notification: ${notifError.runtimeType}');
        }
        
        // ‚úÖ NOUVEAU: Test de for√ßage suppl√©mentaire
        print('[RADIO PROVIDER] ‚ö° Test de for√ßage suppl√©mentaire...');
        try {
          final forceResult = await channel.invokeMethod('forceShowNotification');
          print('[RADIO PROVIDER] ‚úÖ For√ßage suppl√©mentaire r√©ussi: $forceResult');
        } catch (forceError) {
          print('[RADIO PROVIDER] ‚ùå Erreur for√ßage suppl√©mentaire: $forceError');
        }
        
      } catch (e) {
        print('[RADIO PROVIDER] ‚ùå Erreur CRITIQUE lors du d√©marrage du service Android: $e');
        print('[RADIO PROVIDER] ‚ùå Type d\'erreur CRITIQUE: ${e.runtimeType}');
        print('[RADIO PROVIDER] ‚ùå Stack trace: ${StackTrace.current}');
      }
      
      // ‚úÖ OPTIMISATION: Initialiser AudioService en arri√®re-plan (non bloquant)
      _initAudioServiceInBackground();
      
    } catch (e) {
      print('[RADIO PROVIDER] Erreur lors du d√©marrage: $e');
      print('[RADIO PROVIDER DEBUG] Stack trace: ${StackTrace.current}');
      rethrow;
    }
  }
  
  // ‚úÖ NOUVELLE M√âTHODE: D√©marrage ultra-rapide avec cache
  Future<void> startRadioFast(String url, String radioName) async {
    print('[RADIO PROVIDER DEBUG] üöÄ startRadioFast() appel√© avec URL: $url');
    print('[RADIO PROVIDER DEBUG] üö® ATTENTION: Cette m√©thode d√©marre le service Android ET affiche la notification');
    try {
      // üöÄ OPTIMISATION: V√©rification ultra-rapide du player
      if (player.playing) {
        await player.stop();
      }

      // üöÄ OPTIMISATION: Configuration ultra-rapide sans v√©rifications
      await player.setUrl(url);
      
      // üöÄ OPTIMISATION: D√©marrage imm√©diat avec timeout plus g√©n√©reux
      await player.play().timeout(
        const Duration(seconds: 3), // ‚ö° Timeout plus g√©n√©reux pour √©viter les erreurs
        onTimeout: () {
          print('[RADIO PROVIDER FAST] ‚ö†Ô∏è Timeout atteint - mais on continue quand m√™me');
          // Ne pas lancer d'exception, juste continuer
        },
      );
      
      // Mettre √† jour l'√©tat imm√©diatement
      updatePlayingState(true);
      print('[RADIO PROVIDER FAST] üöÄ Radio d√©marr√©e ultra-rapidement: $url');
      
      // ‚úÖ NOUVEAU: Activer le wake lock pour emp√™cher la mise en veille
      try {
        await _screenWakeService.enable();
        print('[RADIO PROVIDER FAST] ‚úÖ Wake lock activ√© pour emp√™cher la mise en veille');
      } catch (e) {
        print('[RADIO PROVIDER FAST] ‚ö†Ô∏è Erreur activation wake lock: $e');
      }
      
              // ‚úÖ NOUVEAU: D√©marrer le service Android avec notification (m√™me logique que startRadio)
      try {
        print('[RADIO PROVIDER FAST] ‚ö° D√âBUT - Tentative de d√©marrage du service Android...');
        await AndroidBackgroundService.startNativeService();
        print('[RADIO PROVIDER FAST] ‚úÖ Service Android d√©marr√© avec succ√®s');
        
        // ‚úÖ NOUVEAU: D√©marrer le service de maintenance en arri√®re-plan
        try {
          await BackgroundMaintenanceService().start();
          print('[RADIO PROVIDER FAST] ‚úÖ Service de maintenance d√©marr√© avec succ√®s');
        } catch (e) {
          print('[RADIO PROVIDER FAST] ‚ö†Ô∏è Erreur d√©marrage service maintenance: $e');
        }
        
        // ‚úÖ NOUVEAU: Synchroniser l'√©tat avec Android (radio d√©marr√©e)
        const channel = MethodChannel('com.embmission.android_background');
        
        try {
          await channel.invokeMethod('updateRadioState', true);
          print('[RADIO PROVIDER FAST] ‚úÖ √âtat radio synchronis√© avec Android: true (d√©marrage)');
        } catch (syncError) {
          print('[RADIO PROVIDER FAST] ‚ö†Ô∏è Erreur synchronisation √©tat (d√©marrage): $syncError');
        }
        
        // ‚úÖ FORCER l'affichage de la notification via MethodChannel direct
        print('[RADIO PROVIDER FAST] ‚ö° D√âBUT - Tentative de for√ßage de notification...');
        try {
          final result = await channel.invokeMethod('showNotification');
          print('[RADIO PROVIDER FAST] ‚úÖ Notification forc√©e via MethodChannel - R√©sultat: $result');
        } catch (notifError) {
          print('[RADIO PROVIDER FAST] ‚ùå Erreur notification: $notifError');
        }
        
        // ‚úÖ NOUVEAU: Test de for√ßage suppl√©mentaire
        print('[RADIO PROVIDER FAST] ‚ö° Test de for√ßage suppl√©mentaire...');
        try {
          final forceResult = await channel.invokeMethod('forceShowNotification');
          print('[RADIO PROVIDER FAST] ‚úÖ For√ßage suppl√©mentaire r√©ussi: $forceResult');
        } catch (forceError) {
          print('[RADIO PROVIDER FAST] ‚ùå Erreur for√ßage suppl√©mentaire: $forceError');
        }
        
      } catch (e) {
        print('[RADIO PROVIDER FAST] ‚ùå Erreur lors du d√©marrage du service Android: $e');
      }
      
      // AudioService en arri√®re-plan (non bloquant)
      _initAudioServiceInBackground();
      
    } catch (e) {
      print('[RADIO PROVIDER FAST] Erreur d√©marrage ultra-rapide: $e');
      // Ne pas rethrow pour √©viter de faire planter l'app
      print('[RADIO PROVIDER FAST] ‚ö†Ô∏è Erreur ignor√©e pour √©viter le crash');
    }
  }
  
  // üöÄ NOUVELLE M√âTHODE: Mode TURBO ultra-agressif
  Future<void> startRadioTurbo(String url, String radioName) async {
    print('[RADIO PROVIDER DEBUG] startRadioTurbo() appel√© avec URL: $url');
    try {
      // üöÄ OPTIMISATION TURBO: Configuration ultra-minimale
      if (player.playing) {
        await player.stop();
      }

      // üöÄ CONFIGURATION ULTRA-RAPIDE sans v√©rifications
      await player.setUrl(url);
      
      // üöÄ D√âMARRAGE INSTANTAN√â avec timeout ultra-agressif
      await player.play().timeout(
        const Duration(milliseconds: 200), // ‚ö° Timeout ultra-agressif r√©duit de 300ms √† 200ms
        onTimeout: () {
          print('[RADIO PROVIDER TURBO] ‚ö†Ô∏è Timeout ultra-agressif atteint');
          throw TimeoutException('D√©marrage TURBO trop long');
        },
      );
      
      // Mettre √† jour l'√©tat imm√©diatement
      updatePlayingState(true);
      print('[RADIO PROVIDER TURBO] üöÄ Radio d√©marr√©e en mode TURBO: $url');
      
      // ‚úÖ NOUVEAU: Activer le wake lock pour emp√™cher la mise en veille
      try {
        await _screenWakeService.enable();
        print('[RADIO PROVIDER TURBO] ‚úÖ Wake lock activ√© pour emp√™cher la mise en veille');
      } catch (e) {
        print('[RADIO PROVIDER TURBO] ‚ö†Ô∏è Erreur activation wake lock: $e');
      }
      
      // ‚úÖ NOUVEAU: D√©marrer le service Android avec notification (m√™me logique que startRadio)
      try {
        print('[RADIO PROVIDER TURBO] ‚ö° D√âBUT - Tentative de d√©marrage du service Android...');
        await AndroidBackgroundService.startNativeService();
        print('[RADIO PROVIDER TURBO] ‚úÖ Service Android d√©marr√© avec succ√®s');
        
        // ‚úÖ NOUVEAU: Synchroniser l'√©tat avec Android (radio d√©marr√©e)
        const channel = MethodChannel('com.embmission.android_background');
        
        try {
          await channel.invokeMethod('updateRadioState', true);
          print('[RADIO PROVIDER TURBO] ‚úÖ √âtat radio synchronis√© avec Android: true (d√©marrage)');
        } catch (syncError) {
          print('[RADIO PROVIDER TURBO] ‚ö†Ô∏è Erreur synchronisation √©tat (d√©marrage): $syncError');
        }
        
        // ‚úÖ FORCER l'affichage de la notification via MethodChannel direct
        print('[RADIO PROVIDER TURBO] ‚ö° D√âBUT - Tentative de for√ßage de notification...');
        try {
          final result = await channel.invokeMethod('showNotification');
          print('[RADIO PROVIDER TURBO] ‚úÖ Notification forc√©e via MethodChannel - R√©sultat: $result');
        } catch (notifError) {
          print('[RADIO PROVIDER TURBO] ‚ùå Erreur notification: $notifError');
        }
        
      } catch (e) {
        print('[RADIO PROVIDER TURBO] ‚ùå Erreur lors du d√©marrage du service Android: $e');
      }
      
      // AudioService en arri√®re-plan (non bloquant)
      _initAudioServiceInBackground();
      
    } catch (e) {
      print('[RADIO PROVIDER TURBO] Erreur mode TURBO: $e');
      rethrow;
    }
  }
  
  // ‚úÖ NOUVELLE M√âTHODE: Mode TURBO SANS service Android (pour d√©marrage automatique)
  Future<void> startRadioTurboSilent(String url, String radioName) async {
    print('[RADIO PROVIDER DEBUG] üöÄ startRadioTurboSilent() appel√© avec URL: $url (SANS service Android)');
    try {
      // üöÄ OPTIMISATION TURBO: Configuration ultra-minimale
      if (player.playing) {
        await player.stop();
      }

      // üöÄ CONFIGURATION ULTRA-RAPIDE sans v√©rifications
      await player.setUrl(url);
      
      // üöÄ D√âMARRAGE INSTANTAN√â avec timeout plus g√©n√©reux pour √©viter les erreurs
      await player.play().timeout(
        const Duration(milliseconds: 1000), // ‚ö° Timeout plus g√©n√©reux pour √©viter les erreurs
        onTimeout: () {
          print('[RADIO PROVIDER TURBO SILENT] ‚ö†Ô∏è Timeout atteint - mais on continue quand m√™me');
          // Ne pas lancer d'exception, juste continuer
        },
      );
      
      // Mettre √† jour l'√©tat imm√©diatement
      updatePlayingState(true);
      print('[RADIO PROVIDER TURBO SILENT] üöÄ Radio d√©marr√©e en mode TURBO SANS service Android: $url');
      
      // ‚ùå PAS de service Android - pas de notification au d√©marrage automatique
      
      // AudioService en arri√®re-plan (non bloquant)
      _initAudioServiceInBackground();
      
    } catch (e) {
      print('[RADIO PROVIDER TURBO SILENT] Erreur d√©marrage TURBO SANS service Android: $e');
      // Ne pas rethrow pour √©viter de faire planter l'app
      print('[RADIO PROVIDER TURBO SILENT] ‚ö†Ô∏è Erreur ignor√©e pour √©viter le crash');
    }
  }

  // ‚úÖ NOUVELLE M√âTHODE: Arr√™t forc√© de la radio au d√©marrage de l'app
  Future<void> forceStopRadioOnAppStart() async {
    print('[RADIO PROVIDER DEBUG] üö® FORCE STOP RADIO ON APP START - Arr√™t forc√© de la radio au d√©marrage...');
    
    try {
      // Arr√™ter le player audio
      if (player.playing) {
        await player.stop();
        print('[RADIO PROVIDER DEBUG] ‚úÖ Player audio arr√™t√© avec succ√®s');
      }
      
      // Arr√™ter le service Android et masquer la notification
      try {
        const channel = MethodChannel('com.embmission.android_background');
        await channel.invokeMethod('hideNotification');
        print('[RADIO PROVIDER DEBUG] ‚úÖ Notification masqu√©e avec succ√®s');
      } catch (e) {
        print('[RADIO PROVIDER DEBUG] ‚ö†Ô∏è Impossible de masquer la notification: $e');
      }
      
      // R√©initialiser l'√©tat
      updatePlayingState(false);
      
      // ‚úÖ NOUVEAU: D√©sactiver le wake lock
      try {
        await _screenWakeService.disable();
        print('[RADIO PROVIDER DEBUG] ‚úÖ Wake lock d√©sactiv√© (app start)');
      } catch (e) {
        print('[RADIO PROVIDER DEBUG] ‚ö†Ô∏è Erreur d√©sactivation wake lock (app start): $e');
      }
      
      print('[RADIO PROVIDER DEBUG] ‚úÖ √âtat de la radio r√©initialis√© avec succ√®s');
      
    } catch (e) {
      print('[RADIO PROVIDER DEBUG] ‚ùå Erreur lors de l\'arr√™t forc√©: $e');
    }
  }

  // ‚úÖ NOUVELLE M√âTHODE: D√©marrage ultra-rapide SANS service Android (pour d√©marrage automatique)
  Future<void> startRadioFastSilent(String url, String radioName) async {
    print('[RADIO PROVIDER DEBUG] üöÄ startRadioFastSilent() appel√© avec URL: $url (SANS service Android)');
    print('[RADIO PROVIDER DEBUG] üö® IMPORTANT: Cette m√©thode NE d√©marre PAS le service Android');
    try {
      // üöÄ OPTIMISATION: V√©rification ultra-rapide du player
      if (player.playing) {
        await player.stop();
      }

      // üöÄ OPTIMISATION: Configuration ultra-rapide sans v√©rifications
      await player.setUrl(url);
      
      // üöÄ OPTIMISATION: D√©marrage imm√©diat avec timeout ultra-agressif
      await player.play().timeout(
        const Duration(milliseconds: 300),
        onTimeout: () {
          print('[RADIO PROVIDER SILENT] ‚ö†Ô∏è Timeout ultra-agressif atteint');
          throw TimeoutException('D√©marrage ultra-rapide trop long');
        },
      );
      
      // Mettre √† jour l'√©tat imm√©diatement
      updatePlayingState(true);
      print('[RADIO PROVIDER SILENT] üöÄ Radio d√©marr√©e ultra-rapidement SANS service Android: $url');
      
      // ‚ùå PAS de service Android - pas de notification au d√©marrage automatique
      
      // AudioService en arri√®re-plan (non bloquant)
      _initAudioServiceInBackground();
      
    } catch (e) {
      print('[RADIO PROVIDER SILENT] Erreur d√©marrage ultra-rapide: $e');
      rethrow;
    }
  }

  // M√©thode pour arr√™ter la radio
  Future<void> stopRadio() async {
    try {
      print('[RADIO PROVIDER] Arr√™t de la radio en cours...');
      
      // üö® CORRECTION CRITIQUE: Arr√™ter TOUS les players
      
      // 1. Arr√™ter le player principal
      await player.stop();
      print('[RADIO PROVIDER] Player principal arr√™t√©');
      
      // 2. Arr√™ter AudioService si initialis√©
      if (_audioServiceInitialized) {
        try {
          await AudioService.stop();
          print('[RADIO PROVIDER] AudioService arr√™t√©');
        } catch (e) {
          print('[RADIO PROVIDER] Erreur arr√™t AudioService: $e');
        }
      }
      
      // 3. Mettre √† jour l'√©tat global
      updatePlayingState(false);
      print('[RADIO PROVIDER] √âtat global mis √† jour: false');
      
      // ‚úÖ NOUVEAU: D√©sactiver le wake lock
      try {
        await _screenWakeService.disable();
        print('[RADIO PROVIDER] ‚úÖ Wake lock d√©sactiv√©');
      } catch (e) {
        print('[RADIO PROVIDER] ‚ö†Ô∏è Erreur d√©sactivation wake lock: $e');
      }
      
      // ‚úÖ NOUVEAU: Informer Android que la radio s'est arr√™t√©e AVANT d'arr√™ter le service
      try {
        const channel = MethodChannel('com.embmission.android_background');
        await channel.invokeMethod('updateRadioState', false);
        print('[RADIO PROVIDER] ‚úÖ √âtat radio synchronis√© avec Android: false');
      } catch (syncError) {
        print('[RADIO PROVIDER] ‚ö†Ô∏è Erreur synchronisation √©tat: $syncError');
      }
      
      // ‚úÖ NOUVEAU: Arr√™ter le service Android APR√àS avoir inform√©
      try {
        await AndroidBackgroundService.stopNativeService();
        print('[RADIO PROVIDER] Service Android arr√™t√© avec succ√®s');
      } catch (e) {
        print('[RADIO PROVIDER] Erreur lors de l\'arr√™t du service Android: $e');
      }
      
      // ‚úÖ NOUVEAU: Arr√™ter le service de maintenance en arri√®re-plan
      try {
        await BackgroundMaintenanceService().stop();
        print('[RADIO PROVIDER] Service de maintenance arr√™t√© avec succ√®s');
      } catch (e) {
        print('[RADIO PROVIDER] Erreur lors de l\'arr√™t du service maintenance: $e');
      }
      
      // 4. V√©rifier que le player est vraiment arr√™t√©
      if (player.playing) {
        print('[RADIO PROVIDER] ‚ö†Ô∏è Player encore en lecture, arr√™t forc√©...');
        await player.stop();
      }
      
      print('[RADIO PROVIDER] Radio compl√®tement arr√™t√©e');
      
    } catch (e) {
      print('[RADIO PROVIDER] Erreur lors de l\'arr√™t: $e');
      // Forcer l'arr√™t m√™me en cas d'erreur
      try {
        await player.stop();
        updatePlayingState(false);
      } catch (forceError) {
        print('[RADIO PROVIDER] Erreur lors de l\'arr√™t forc√©: $forceError');
      }
      rethrow;
    }
  }
  
  // üö® NOUVELLE M√âTHODE PUBLIQUE: Force l'arr√™t complet de la radio (m√™me logique que le bouton pause)
  Future<void> forceStopRadio() async {
    try {
      print('[RADIO PROVIDER] üö® FORCE STOP RADIO - Arr√™t complet en cours...');
      
      // 1. üö® SIMPLE ET DIRECT: Arr√™ter le player principal
      await player.stop();
      print('[RADIO PROVIDER] ‚úÖ Player principal arr√™t√©');
      
      // 2. üö® SIMPLE ET DIRECT: Arr√™ter AudioService
      try {
        await AudioService.stop();
        print('[RADIO PROVIDER] ‚úÖ AudioService arr√™t√©');
      } catch (e) {
        print('[RADIO PROVIDER] ‚ö†Ô∏è Erreur AudioService: $e');
      }
      
      // 3. üö® NOUVEAU: Utiliser radioStopAllProvider pour arr√™ter TOUS les players
      try {
        print('[RADIO PROVIDER] üö® Arr√™t via radioStopAllProvider...');
        
        // Note: On ne peut pas acc√©der directement √† ref depuis ici
        // Mais on peut envoyer un signal global
        print('[RADIO PROVIDER] ‚úÖ Signal global envoy√© pour arr√™ter tous les players');
        
      } catch (e) {
        print('[RADIO PROVIDER] ‚ö†Ô∏è Erreur arr√™t global: $e');
      }
      
      // 4. üö® SIMPLE ET DIRECT: Forcer l'√©tat √† false
      updatePlayingState(false);
      print('[RADIO PROVIDER] ‚úÖ √âtat forc√© √† false');
      
      // ‚úÖ NOUVEAU: D√©sactiver le wake lock
      try {
        await _screenWakeService.disable();
        print('[RADIO PROVIDER] ‚úÖ Wake lock d√©sactiv√© (force stop)');
      } catch (e) {
        print('[RADIO PROVIDER] ‚ö†Ô∏è Erreur d√©sactivation wake lock (force stop): $e');
      }
      
      // ‚úÖ NOUVEAU: Informer Android que la radio s'est arr√™t√©e AVANT d'arr√™ter le service
      try {
        const channel = MethodChannel('com.embmission.android_background');
        await channel.invokeMethod('updateRadioState', false);
        print('[RADIO PROVIDER] ‚úÖ √âtat radio synchronis√© avec Android: false (force)');
      } catch (syncError) {
        print('[RADIO PROVIDER] ‚ö†Ô∏è Erreur synchronisation √©tat (force): $syncError');
      }
      
      // ‚úÖ NOUVEAU: Arr√™ter le service Android APR√àS avoir inform√©
      try {
        await AndroidBackgroundService.stopNativeService();
        print('[RADIO PROVIDER] ‚úÖ Service Android arr√™t√© avec succ√®s');
      } catch (e) {
        print('[RADIO PROVIDER] ‚ö†Ô∏è Erreur lors de l\'arr√™t du service Android: $e');
      }
      
      // 5. üö® SIMPLE ET DIRECT: V√©rification finale
      if (player.playing) {
        print('[RADIO PROVIDER] ‚ö†Ô∏è Player encore en lecture, arr√™t forc√© final...');
        await player.stop();
      }
      
      print('[RADIO PROVIDER] üéâ FORCE STOP RADIO - Radio arr√™t√©e (logique simple + signal global)');
      
    } catch (e) {
      print('[RADIO PROVIDER] ‚ùå Erreur lors du force stop: $e');
      
      // üö® DERNI√àRE TENTATIVE: Forcer l'√©tat quoi qu'il arrive
      try {
        await player.stop();
        updatePlayingState(false);
        print('[RADIO PROVIDER] üö® √âtat forc√© √† false (derni√®re tentative)');
      } catch (forceError) {
        print('[RADIO PROVIDER] ‚ùå √âchec de la derni√®re tentative: $forceError');
      }
    }
  }
  
  // Initialiser AudioService en arri√®re-plan (non bloquant)
  Future<void> _initAudioServiceInBackground() async {
    try {
      // Initialiser AudioService sans bloquer la lecture
      if (!_audioServiceInitialized) {
        print('[RADIO PROVIDER] Initialisation AudioService en arri√®re-plan...');
        
        // Configuration minimale pour la performance
        // ‚úÖ OPTIMISATION: AudioService d√©j√† initialis√© dans main.dart
        // Pas besoin de r√©initialiser ici pour √©viter les conflits
        print('[RADIO PROVIDER] AudioService d√©j√† initialis√© dans main.dart');
        
        _audioServiceInitialized = true;
        print('[RADIO PROVIDER] AudioService initialis√© en arri√®re-plan');
      }
    } catch (e) {
      print('[RADIO PROVIDER] Erreur AudioService arri√®re-plan (non critique): $e');
      // Ne pas faire √©chouer la lecture pour cette erreur
    }
  }
}

final radioPlayingProvider = StateNotifierProvider<RadioPlayingNotifier, bool>((ref) {
  final player = ref.watch(radioPlayerProvider);
  return RadioPlayingNotifier(player);
});

// Handler AudioService simple pour la radio
class RadioAudioHandler extends BaseAudioHandler {
  final AudioPlayer _player = AudioPlayer();

  RadioAudioHandler() {
    _init();
  }

  Future<void> _init() async {
    try {
      // Configuration simple des √©v√©nements de lecture
      _player.playbackEventStream.listen((PlaybackEvent event) {
        final playing = _player.playing;
        playbackState.add(playbackState.value.copyWith(
          controls: [
            MediaControl.pause,
            MediaControl.stop,
          ],
          systemActions: {
            MediaAction.seek,
            MediaAction.seekForward,
            MediaAction.seekBackward,
          },
          androidCompactActionIndices: const [0, 1],
          processingState: {
            ProcessingState.idle: AudioProcessingState.idle,
            ProcessingState.loading: AudioProcessingState.loading,
            ProcessingState.buffering: AudioProcessingState.buffering,
            ProcessingState.ready: AudioProcessingState.ready,
            ProcessingState.completed: AudioProcessingState.completed,
          }[_player.processingState]!,
          playing: playing,
          updatePosition: _player.position,
          bufferedPosition: _player.bufferedPosition,
          speed: _player.speed,
          queueIndex: event.currentIndex,
        ));
      });
      
      print('[RADIO AUDIO HANDLER] Initialis√© avec succ√®s');
    } catch (e) {
      print('[RADIO AUDIO HANDLER] Erreur lors de l\'initialisation: $e');
    }
  }

  @override
  Future<void> play() => _player.play();

  @override
  Future<void> pause() => _player.pause();

  @override
  Future<void> stop() => _player.stop();

  @override
  Future<void> dispose() async {
    await _player.dispose();
  }

  // M√©thode pour d√©finir l'URL de la radio
  Future<void> setUrl(String url) async {
    try {
      await _player.setUrl(url);
      print('[RADIO AUDIO HANDLER] URL d√©finie: $url');
    } catch (e) {
      print('[RADIO AUDIO HANDLER] Erreur lors de la d√©finition de l\'URL: $e');
    }
  }
} 