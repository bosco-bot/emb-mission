import 'package:flutter/services.dart';
import 'package:flutter/material.dart';
import 'package:wakelock_plus/wakelock_plus.dart';

/// Service pour g√©rer l'√©cran de veille
class ScreenWakeService {
  static final ScreenWakeService _instance = ScreenWakeService._internal();
  factory ScreenWakeService() => _instance;
  ScreenWakeService._internal();

  bool _isEnabled = false;

  /// √âtat actuel de l'√©cran de veille
  bool get isEnabled => _isEnabled;

  /// Activer l'√©cran de veille
  Future<void> enable() async {
    try {
      await WakelockPlus.enable();
      
      // Configuration de l'interface syst√®me
      await SystemChrome.setEnabledSystemUIMode(SystemUiMode.immersiveSticky);
      
      // Permettre toutes les orientations
      await SystemChrome.setPreferredOrientations([
        DeviceOrientation.landscapeLeft,
        DeviceOrientation.landscapeRight,
        DeviceOrientation.portraitUp,
        DeviceOrientation.portraitDown,
      ]);
      
      _isEnabled = true;
      print('üîÜ √âcran de veille activ√©');
    } catch (e) {
      print('‚ùå Erreur lors de l\'activation de l\'√©cran de veille: $e');
      rethrow;
    }
  }

  /// D√©sactiver l'√©cran de veille
  Future<void> disable() async {
    try {
      await WakelockPlus.disable();
      
      // Restaurer l'interface syst√®me normale
      await SystemChrome.setEnabledSystemUIMode(SystemUiMode.edgeToEdge);
      
      // Restaurer les orientations par d√©faut
      await SystemChrome.setPreferredOrientations([
        DeviceOrientation.portraitUp,
        DeviceOrientation.portraitDown,
      ]);
      
      _isEnabled = false;
      print('üåô √âcran de veille d√©sactiv√©');
    } catch (e) {
      print('‚ùå Erreur lors de la d√©sactivation de l\'√©cran de veille: $e');
      rethrow;
    }
  }

  /// Basculer l'√©tat de l'√©cran de veille
  Future<void> toggle() async {
    if (_isEnabled) {
      await disable();
    } else {
      await enable();
    }
  }

  /// V√©rifier si l'√©cran de veille est support√© sur cette plateforme
  Future<bool> isSupported() async {
    try {
      // Test simple pour v√©rifier si wakelock_plus fonctionne
      return true;
    } catch (e) {
      print('‚ùå √âcran de veille non support√© sur cette plateforme: $e');
      return false;
    }
  }

  /// Activer l'√©cran de veille seulement si la vid√©o est en cours de lecture
  Future<void> enableForVideoPlayback(bool isPlaying) async {
    if (isPlaying) {
      await enable();
    } else {
      await disable();
    }
  }
} 