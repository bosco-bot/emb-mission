import 'package:shared_preferences/shared_preferences.dart';
import 'package:http/http.dart' as http;
import 'dart:async';
import 'dart:convert';

/// Service pour g√©rer l'activit√© des utilisateurs connect√©s
class UserActivityService {
  static const _lastActiveKey = 'user_last_active';
  static const _baseUrl = 'https://embmission.com/mobileappebm/api';

  /// Met √† jour le last_active de l'utilisateur connect√© c√¥t√© backend
  static Future<bool> updateUserLastActive(String userId) async {
    try {
      final url = Uri.parse('$_baseUrl/update_user_last_active?user_id=$userId');
      
      print('üîÑ Mise √† jour de l\'activit√© utilisateur: $userId');
      
      final response = await http.get(url).timeout(
        const Duration(seconds: 10),
        onTimeout: () {
          throw TimeoutException('Timeout lors de la mise √† jour de l\'activit√© utilisateur');
        },
      );
      
      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        
        if (data['success'] == 'true') {
          // Sauvegarder le timestamp de la derni√®re mise √† jour
          final prefs = await SharedPreferences.getInstance();
          await prefs.setString(_lastActiveKey, DateTime.now().toIso8601String());
          
          print('‚úÖ Activit√© utilisateur mise √† jour avec succ√®s');
          return true;
        } else {
          print('‚ö†Ô∏è R√©ponse API indique un √©chec: ${data['success']}');
          return false;
        }
      } else {
        print('‚ö†Ô∏è Erreur serveur lors de la mise √† jour de l\'activit√© utilisateur: ${response.statusCode}');
        return false;
      }
    } catch (e) {
      print('‚ùå Erreur lors de la mise √† jour de l\'activit√© utilisateur: $e');
      return false;
    }
  }

  /// R√©cup√®re le timestamp de la derni√®re activit√©
  static Future<DateTime?> getLastActiveTime() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final lastActive = prefs.getString(_lastActiveKey);
      if (lastActive != null) {
        return DateTime.parse(lastActive);
      }
      return null;
    } catch (e) {
      print('‚ùå Erreur lors de la r√©cup√©ration du timestamp d\'activit√© utilisateur: $e');
      return null;
    }
  }

  /// V√©rifie si l'utilisateur est actif (derni√®re activit√© < 1 heure)
  static Future<bool> isUserActive() async {
    try {
      final lastActive = await getLastActiveTime();
      if (lastActive == null) return false;
      
      final difference = DateTime.now().difference(lastActive);
      return difference.inHours < 1;
    } catch (e) {
      print('‚ùå Erreur lors de la v√©rification de l\'activit√© utilisateur: $e');
      return false;
    }
  }

  /// Nettoie les donn√©es utilisateur (pour la d√©connexion)
  static Future<void> clearUserActivityData() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.remove(_lastActiveKey);
      print('üßπ Donn√©es d\'activit√© utilisateur supprim√©es');
    } catch (e) {
      print('‚ùå Erreur lors de la suppression des donn√©es d\'activit√© utilisateur: $e');
    }
  }

  /// V√©rifie si l'utilisateur doit √™tre consid√©r√© comme actif
  static Future<bool> shouldUpdateActivity(String userId) async {
    try {
      final lastActive = await getLastActiveTime();
      if (lastActive == null) return true;
      
      // Mettre √† jour si la derni√®re activit√© date de plus de 4 minutes
      final difference = DateTime.now().difference(lastActive);
      return difference.inMinutes >= 4;
    } catch (e) {
      print('‚ùå Erreur lors de la v√©rification de la n√©cessit√© de mise √† jour: $e');
      return true; // En cas d'erreur, on met √† jour par pr√©caution
    }
  }
}
