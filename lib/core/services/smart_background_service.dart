import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'dart:async';
import 'background_maintenance_service.dart';

/// Service intelligent pour g√©rer l'activit√© en arri√®re-plan
/// Adapte automatiquement le niveau d'activit√© selon le contexte
class SmartBackgroundService {
  static final SmartBackgroundService _instance = SmartBackgroundService._internal();
  factory SmartBackgroundService() => _instance;
  SmartBackgroundService._internal();

  Timer? _contextAnalysisTimer;
  bool _isActive = false;
  
  // ‚úÖ NOUVEAU: Analyse du contexte utilisateur
  DateTime? _lastUserInteraction;
  bool _isRadioPlaying = false;
  bool _hasActiveNotifications = false;
  bool _isLowBattery = false;

  /// D√©marrer le service intelligent
  Future<void> start() async {
    if (_isActive) return;
    
    try {
      print('üß† D√©marrage du service intelligent de gestion en arri√®re-plan');
      
      // D√©marrer le service de maintien en mode normal
      BackgroundMaintenanceService().start();
      
      // D√©marrer l'analyse du contexte
      _startContextAnalysis();
      
      _isActive = true;
      print('‚úÖ Service intelligent d√©marr√©');
      
    } catch (e) {
      print('‚ùå Erreur lors du d√©marrage du service intelligent: $e');
    }
  }

  /// Arr√™ter le service intelligent
  Future<void> stop() async {
    if (!_isActive) return;
    
    try {
      print('üß† Arr√™t du service intelligent');
      
      // Arr√™ter l'analyse du contexte
      _contextAnalysisTimer?.cancel();
      
      // Arr√™ter le service de maintien
      BackgroundMaintenanceService().stop();
      
      _isActive = false;
      print('‚úÖ Service intelligent arr√™t√©');
      
    } catch (e) {
      print('‚ùå Erreur lors de l\'arr√™t du service intelligent: $e');
    }
  }

  /// D√©marrer l'analyse du contexte
  void _startContextAnalysis() {
    _contextAnalysisTimer?.cancel();
    
    // Analyser le contexte toutes les minutes
    _contextAnalysisTimer = Timer.periodic(const Duration(minutes: 1), (timer) {
      if (_isActive) {
        _analyzeContext();
      }
    });
    
    print('üîç Analyse du contexte d√©marr√©e (1min)');
  }

  /// Analyser le contexte et adapter l'activit√©
  void _analyzeContext() {
    try {
      print('üß† Analyse du contexte en cours...');
      
      // 1. Analyser l'activit√© utilisateur
      _analyzeUserActivity();
      
      // 2. Analyser l'√©tat de la radio
      _analyzeRadioState();
      
      // 3. Analyser les notifications
      _analyzeNotifications();
      
      // 4. Analyser la batterie
      _analyzeBatteryState();
      
      // 5. Prendre une d√©cision intelligente
      _makeSmartDecision();
      
      print('‚úÖ Analyse du contexte termin√©e');
      
    } catch (e) {
      print('‚ùå Erreur lors de l\'analyse du contexte: $e');
    }
  }

  /// Analyser l'activit√© utilisateur
  void _analyzeUserActivity() {
    final now = DateTime.now();
    final timeSinceInteraction = _lastUserInteraction != null 
        ? now.difference(_lastUserInteraction!).inMinutes 
        : 60;
    
    print('üë§ Activit√© utilisateur: ${timeSinceInteraction}min depuis la derni√®re interaction');
    
    // Mettre √† jour le service de maintien
    BackgroundMaintenanceService().updateUserActivity();
  }

  /// Analyser l'√©tat de la radio
  void _analyzeRadioState() {
    // Cette m√©thode sera appel√©e depuis le provider radio
    print('üìª √âtat radio: ${_isRadioPlaying ? "En cours" : "Arr√™t√©e"}');
  }

  /// Analyser les notifications
  void _analyzeNotifications() {
    // Cette m√©thode sera appel√©e depuis le service de notifications
    print('üîî Notifications: ${_hasActiveNotifications ? "Actives" : "Aucune"}');
  }

  /// Analyser l'√©tat de la batterie
  void _analyzeBatteryState() {
    // Cette m√©thode peut √™tre √©tendue pour v√©rifier le niveau de batterie
    print('üîã √âtat batterie: ${_isLowBattery ? "Faible" : "Normal"}');
  }

  /// Prendre une d√©cision intelligente sur le niveau d'activit√©
  void _makeSmartDecision() {
    final maintenanceService = BackgroundMaintenanceService();
    
    // ‚úÖ LOGIQUE INTELLIGENTE: Adapter le mode selon le contexte
    
    if (_isRadioPlaying) {
      // Radio en cours ‚Üí mode agressif pour maintenir la stabilit√©
      maintenanceService.setMode(BackgroundMaintenanceService.BackgroundMode.aggressive);
      print('üéµ Radio active ‚Üí mode agressif activ√©');
      
    } else if (_hasActiveNotifications) {
      // Notifications actives ‚Üí mode normal
      maintenanceService.setMode(BackgroundMaintenanceService.BackgroundMode.normal);
      print('üîî Notifications actives ‚Üí mode normal activ√©');
      
    } else if (_isLowBattery) {
      // Batterie faible ‚Üí mode √©conomie
      maintenanceService.setMode(BackgroundMaintenanceService.BackgroundMode.battery);
      print('üîã Batterie faible ‚Üí mode √©conomie activ√©');
      
    } else {
      // Contexte normal ‚Üí mode normal
      maintenanceService.setMode(BackgroundMaintenanceService.BackgroundMode.normal);
      print('üì± Contexte normal ‚Üí mode normal activ√©');
    }
  }

  /// ‚úÖ NOUVEAU: Mettre √† jour l'√©tat de la radio
  void updateRadioState(bool isPlaying) {
    _isRadioPlaying = isPlaying;
    print('üìª √âtat radio mis √† jour: ${isPlaying ? "En cours" : "Arr√™t√©e"}');
  }

  /// ‚úÖ NOUVEAU: Mettre √† jour l'√©tat des notifications
  void updateNotificationState(bool hasActive) {
    _hasActiveNotifications = hasActive;
    print('üîî √âtat notifications mis √† jour: ${hasActive ? "Actives" : "Aucune"}');
  }

  /// ‚úÖ NOUVEAU: Mettre √† jour l'√©tat de la batterie
  void updateBatteryState(bool isLow) {
    _isLowBattery = isLow;
    print('üîã √âtat batterie mis √† jour: ${isLow ? "Faible" : "Normal"}');
  }

  /// ‚úÖ NOUVEAU: Enregistrer une interaction utilisateur
  void recordUserInteraction() {
    _lastUserInteraction = DateTime.now();
    print('üë§ Interaction utilisateur enregistr√©e');
  }

  /// V√©rifier si le service est actif
  bool get isActive => _isActive;

  /// Obtenir le mode actuel
  BackgroundMaintenanceService.BackgroundMode get currentMode {
    return BackgroundMaintenanceService().currentMode;
  }

  /// Nettoyer les ressources
  void dispose() {
    stop();
  }
}


