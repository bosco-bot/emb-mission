import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:emb_mission/core/providers/notification_provider.dart';
import 'dart:convert';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:path_provider/path_provider.dart';
import 'dart:io';

class NotificationService {
  static final FlutterLocalNotificationsPlugin _localNotifications = FlutterLocalNotificationsPlugin();
  static final FirebaseMessaging _firebaseMessaging = FirebaseMessaging.instance;
  static Function? _readFunction;
  static Set<String> _processedNotifications = {}; // Pour √©viter les doublons
  static bool _openNotificationsSheetPending = false; // Ouvrir sheet √† l'ouverture depuis la barre syst√®me

  /// Initialise le service de notifications
  static Future<void> initialize(Function readFunction) async {
    try {
      _readFunction = readFunction;
      
      // Configurer la fonction de lecture dans NotificationsNotifier
      NotificationsNotifier.setReadFunction(readFunction);
      
      print('‚úÖ NotificationService initialis√©');
      
      // Traiter les notifications en attente (re√ßues en arri√®re-plan)
      await _processPendingNotifications();
      
      // V√©rifier s'il y a une notification initiale (app ouverte depuis notification)
      await _checkInitialMessage();
      
      // Demander les permissions de mani√®re conditionnelle
      _requestPermissionsWhenReady();
      
      // Configurer les handlers
      _setupMessageHandlers();
      
      // Configurer les canaux de notification
      await _setupNotificationChannels();
      
      print('‚úÖ Service de notifications configur√© avec succ√®s');
    } catch (e) {
      print('‚ùå Erreur initialisation NotificationService: $e');
    }
  }

  /// Traite les notifications re√ßues en arri√®re-plan (m√©thode priv√©e)
  static Future<void> _processPendingNotifications() async {
    try {
      // Lire les notifications depuis le fichier (plus fiable que SharedPreferences)
      final appDir = await getApplicationDocumentsDirectory();
      final notificationsFile = File('${appDir.path}/pending_notifications.json');
      
      if (await notificationsFile.exists()) {
        try {
          final content = await notificationsFile.readAsString();
          final List<dynamic> jsonList = jsonDecode(content);
          final notifications = jsonList.cast<Map<String, dynamic>>();
          
          if (notifications.isNotEmpty) {
            print('üîç DEBUG: Traitement de ${notifications.length} notifications depuis le fichier');
            
            for (final notificationData in notifications) {
              try {
                final title = notificationData['title'] as String?;
                final body = notificationData['body'] as String?;
                
                if (title != null && body != null) {
                  print('üîç DEBUG: Traitement notification depuis fichier: $title');
                  // Utiliser la m√©thode centralis√©e
                  await _handleNotification(title, body);
                }
              } catch (e) {
                print('‚ùå Erreur traitement notification depuis fichier: $e');
              }
            }
            
            // Supprimer le fichier apr√®s traitement
            await notificationsFile.delete();
            print('üîç DEBUG: Fichier de notifications supprim√© apr√®s traitement');
            print('‚úÖ Notifications depuis fichier trait√©es et supprim√©es');
          } else {
            print('üîç DEBUG: Fichier de notifications vide');
          }
        } catch (e) {
          print('‚ùå Erreur lecture fichier de notifications: $e');
          // En cas d'erreur, supprimer le fichier corrompu
          if (await notificationsFile.exists()) {
            await notificationsFile.delete();
            print('üîç DEBUG: Fichier corrompu supprim√©');
          }
        }
      } else {
        print('üîç DEBUG: Aucun fichier de notifications trouv√©');
      }
      
      // Nettoyer aussi les anciennes cl√©s SharedPreferences si elles existent encore
      final prefs = await SharedPreferences.getInstance();
      final allKeys = prefs.getKeys();
      
      // Nettoyer d'abord les anciennes cl√©s 'pending_notifications' si elles existent
      final oldPendingKeys = allKeys.where((key) => key == 'pending_notifications').toList();
      if (oldPendingKeys.isNotEmpty) {
        print('üîç DEBUG: Nettoyage des anciennes cl√©s: $oldPendingKeys');
        for (final key in oldPendingKeys) {
          await prefs.remove(key);
          print('üîç DEBUG: Ancienne cl√© supprim√©e: $key');
        }
      }
      
      // Nettoyer aussi toutes les cl√©s qui commencent par 'pending_notification_' (ancien format)
      final oldPendingNotificationKeys = allKeys.where((key) => key.startsWith('pending_notification_')).toList();
      if (oldPendingNotificationKeys.isNotEmpty) {
        print('üîç DEBUG: Nettoyage des anciennes cl√©s pending_notification_: $oldPendingNotificationKeys');
        for (final key in oldPendingNotificationKeys) {
          await prefs.remove(key);
          print('üîç DEBUG: Ancienne cl√© pending_notification_ supprim√©e: $key');
        }
      }
      
      // Nettoyer aussi toutes les cl√©s qui commencent par 'bg_notif_' (ancien format)
      final oldBgNotifKeys = allKeys.where((key) => key.startsWith('bg_notif_')).toList();
      if (oldBgNotifKeys.isNotEmpty) {
        print('üîç DEBUG: Nettoyage des anciennes cl√©s bg_notif_: $oldBgNotifKeys');
        for (final key in oldBgNotifKeys) {
          await prefs.remove(key);
          print('üîç DEBUG: Ancienne cl√© bg_notif_ supprim√©e: $key');
        }
      }
      
    } catch (e) {
      print('‚ùå Erreur traitement notifications en attente: $e');
    }
  }

  /// Traite les notifications en attente (m√©thode publique pour HomeScreen)
  static Future<void> processPendingNotifications() async {
    await _processPendingNotifications();
  }

  /// Demande les permissions de notifications
  static Future<void> _requestPermissions() async {
    try {
      NotificationSettings settings = await _firebaseMessaging.requestPermission(
        alert: true,
        badge: true,
        sound: true,
        provisional: false,
      );
      print('üîî Permissions notifications: ${settings.authorizationStatus}');
    } catch (e) {
      print('‚ùå Erreur permissions: $e');
    }
  }

  /// Demande les permissions quand l'activit√© est pr√™te
  static void _requestPermissionsWhenReady() {
    // Essayer plusieurs fois avec des d√©lais croissants
    _tryRequestPermissions(attempt: 1);
  }

  /// Essaie de demander les permissions avec retry
  static void _tryRequestPermissions({required int attempt}) {
    if (attempt > 5) {
      print('‚ö†Ô∏è Impossible de demander les permissions apr√®s 5 tentatives');
      return;
    }

    // D√©lai croissant : 500ms, 1s, 2s, 4s, 8s
    final delay = Duration(milliseconds: 500 * (1 << (attempt - 1)));
    
    Future.delayed(delay, () async {
      try {
        await _requestPermissions();
        print('‚úÖ Permissions demand√©es avec succ√®s √† la tentative $attempt');
      } catch (e) {
        print('‚ö†Ô∏è Tentative $attempt √©chou√©e: $e');
        // R√©essayer avec un d√©lai plus long
        _tryRequestPermissions(attempt: attempt + 1);
      }
    });
  }

  /// Configure les canaux de notification
  static Future<void> _setupNotificationChannels() async {
    try {
      const AndroidNotificationChannel channel = AndroidNotificationChannel(
        'high_importance_channel',
        'Notifications importantes',
        description: 'Canal pour les notifications importantes',
        importance: Importance.high,
      );

      await _localNotifications
          .resolvePlatformSpecificImplementation<AndroidFlutterLocalNotificationsPlugin>()
          ?.createNotificationChannel(channel);

      await _localNotifications.initialize(
        const InitializationSettings(
          android: AndroidInitializationSettings('@mipmap/ic_launcher'),
          iOS: DarwinInitializationSettings(),
        ),
      );
      
      print('‚úÖ Canaux de notification configur√©s');
    } catch (e) {
      print('‚ùå Erreur configuration canaux: $e');
    }
  }

  /// Marque l'ouverture automatique du BottomSheet notifications √† la prochaine frame
  static void markOpenNotificationsSheetPending() {
    _openNotificationsSheetPending = true;
  }

  /// Consomme le flag d'ouverture automatique (retourne true une seule fois)
  static bool consumeOpenNotificationsSheetPending() {
    if (_openNotificationsSheetPending) {
      _openNotificationsSheetPending = false;
      return true;
    }
    return false;
  }

  /// Ajoute une notification au provider
  static void addNotificationToProvider(String title, String body) {
    print('üîç DEBUG: Tentative d\'ajout de notification: $title');
    print('üîç DEBUG: _readFunction est null? ${_readFunction == null}');
    
    if (_readFunction != null) {
      try {
        // V√©rifier si la notification existe d√©j√†
        final notifications = _readFunction!(notificationsProvider);
        final exists = notifications.any((n) => 
          n.title == title && 
          n.body == body && 
          DateTime.now().difference(n.receivedAt).inMinutes < 5
        );
        
        if (exists) {
          print('‚ö†Ô∏è Notification similaire d√©j√† pr√©sente, ignor√©e: $title');
          return;
        }
        
        // Acc√©der au provider de notifications
        final notifier = _readFunction!(notificationsProvider.notifier);
        print('üîç DEBUG: Notifier r√©cup√©r√©: ${notifier.runtimeType}');
        
        notifier.addNotification(title, body);
        print('üîç DEBUG: Notification ajout√©e au notifier');
        
        // Le compteur sera automatiquement mis √† jour par NotificationsNotifier
        print('‚úÖ Notification ajout√©e: $title');
      } catch (e) {
        print('‚ùå Erreur ajout notification: $e');
        print('‚ùå Stack trace: ${StackTrace.current}');
      }
    } else {
      print('‚ùå _readFunction est null');
    }
  }

  /// M√©thode pour simuler l'ajout d'une notification (pour test)
  static void addTestNotification(String title, String body) {
    addNotificationToProvider(title, body);
  }

  /// R√©initialise le badge
  static void resetBadge() {
    if (_readFunction != null) {
      try {
        final countNotifier = _readFunction!(unreadCountProvider.notifier);
        countNotifier.reset();
      } catch (e) {
        print('‚ùå Erreur reset badge: $e');
      }
    }
  }

  /// Configure les handlers pour les messages
  static void _setupMessageHandlers() {
    // Message re√ßu quand l'app est en premier plan
    FirebaseMessaging.onMessage.listen((RemoteMessage message) {
      print('üì® Message re√ßu en premier plan: ${message.notification?.title}');
      _showLocalNotification(message);
    });

    // Message re√ßu quand l'app est en arri√®re-plan et ouverte
    FirebaseMessaging.onMessageOpenedApp.listen((RemoteMessage message) {
      print('üì® App ouverte depuis notification: ${message.notification?.title}');
      try {
        final notification = message.notification;
        if (notification != null) {
          // Utiliser la m√©thode centralis√©e
          _handleNotification(
            notification.title!,
            notification.body!,
            shouldOpenBottomSheet: true,
          );
        }
      } catch (e) {
        print('‚ùå Erreur traitement notification ouverte: $e');
      }
    });

    // Note: getInitialMessage() est maintenant g√©r√© dans initialize() via _checkInitialMessage()
    print('‚úÖ Handlers de messages configur√©s');
  }

  /// Affiche une notification locale
  static Future<void> _showLocalNotification(RemoteMessage message) async {
    try {
      final notification = message.notification;
      if (notification == null) return;

      // V√©rifier si la notification a d√©j√† √©t√© trait√©e (plus strict)
      final notificationId = '${notification.title}_${notification.body}_${DateTime.now().millisecondsSinceEpoch ~/ 60000}'; // ID par minute
      if (_processedNotifications.contains(notificationId)) {
        print('‚ö†Ô∏è Notification d√©j√† trait√©e dans cette minute, ignor√©e: ${notification.title}');
        return;
      }

      // Marquer comme trait√©e
      _processedNotifications.add(notificationId);
      
      // Nettoyer les anciennes entr√©es
      _cleanupProcessedNotifications();

      // Utiliser la m√©thode centralis√©e pour traiter la notification
      await _handleNotification(notification.title!, notification.body!);

      // Afficher la notification locale
      const AndroidNotificationDetails androidPlatformChannelSpecifics =
          AndroidNotificationDetails(
        'high_importance_channel',
        'Notifications importantes',
        channelDescription: 'Canal pour les notifications importantes',
        importance: Importance.max,
        priority: Priority.high,
        showWhen: true,
      );

      const NotificationDetails platformChannelSpecifics =
          NotificationDetails(android: androidPlatformChannelSpecifics);

      await _localNotifications.show(
        notification.hashCode,
        notification.title,
        notification.body,
        platformChannelSpecifics,
      );

      print('‚úÖ Notification locale affich√©e: ${notification.title}');
    } catch (e) {
      print('‚ùå Erreur affichage notification locale: $e');
    }
  }

  /// Nettoie les notifications trait√©es (pour √©viter l'accumulation en m√©moire)
  static void _cleanupProcessedNotifications() {
    if (_processedNotifications.length > 50) { // R√©duit de 100 √† 50
      _processedNotifications.clear();
      print('üßπ Nettoyage des notifications trait√©es');
    }
  }

  /// V√©rifie s'il y a une notification initiale (app ouverte depuis notification)
  static Future<void> _checkInitialMessage() async {
    try {
      final initialMessage = await FirebaseMessaging.instance.getInitialMessage();
      if (initialMessage != null) {
        print('üì® Notification initiale d√©tect√©e: ${initialMessage.notification?.title}');
        await _handleNotification(
          initialMessage.notification?.title ?? '',
          initialMessage.notification?.body ?? '',
          shouldOpenBottomSheet: true,
        );
      }
    } catch (e) {
      print('‚ùå Erreur v√©rification message initial: $e');
    }
  }

  /// M√©thode centralis√©e pour g√©rer toutes les notifications
  static Future<void> _handleNotification(String title, String body, {bool shouldOpenBottomSheet = false}) async {
    if (title.isEmpty || body.isEmpty) return;
    
    print('üîç DEBUG: _handleNotification appel√© avec: $title');
    
    try {
      // Ajouter la notification au provider
      addNotificationToProvider(title, body);
      
      // D√©clencher un nettoyage automatique apr√®s l'ajout
      _triggerAutoCleanup();
      
      // Marquer pour ouvrir le bottom sheet si n√©cessaire
      if (shouldOpenBottomSheet) {
        markOpenNotificationsSheetPending();
        print('üîç DEBUG: Bottom sheet marqu√© pour ouverture automatique');
      }
      
      print('‚úÖ Notification trait√©e avec succ√®s: $title');
    } catch (e) {
      print('‚ùå Erreur traitement notification: $e');
    }
  }

  /// D√©clenche le nettoyage automatique des notifications expir√©es
  static void _triggerAutoCleanup() {
    try {
      if (_readFunction != null) {
        final notifier = _readFunction!(notificationsProvider.notifier);
        // Appeler la m√©thode de nettoyage forc√© pour un nettoyage imm√©diat
        notifier.forceCleanupExpiredNotifications();
        print('[NOTIFICATIONS] üßπ Nettoyage automatique d√©clench√© apr√®s nouvelle notification');
      }
    } catch (e) {
      print('[NOTIFICATIONS] ‚ùå Erreur lors du d√©clenchement du nettoyage: $e');
    }
  }
} 