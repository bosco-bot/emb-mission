import 'package:shared_preferences/shared_preferences.dart';
import 'package:http/http.dart' as http;
import 'dart:async';
import 'dart:convert';

/// Service pour la r√©cup√©ration proactive des donn√©es utilisateur
class ProactiveDataRecoveryService {
  static const _baseUrl = 'https://embmission.com/mobileappebm/api';
  static const _lastRecoveryKey = 'last_proactive_recovery';
  static const _recoveryInterval = Duration(minutes: 30); // R√©cup√©ration toutes les 30 minutes max

  /// V√©rifie si une r√©cup√©ration proactive est n√©cessaire
  static Future<bool> shouldPerformRecovery() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final lastRecovery = prefs.getString(_lastRecoveryKey);
      
      if (lastRecovery == null) return true;
      
      final lastRecoveryTime = DateTime.parse(lastRecovery);
      final difference = DateTime.now().difference(lastRecoveryTime);
      
      // R√©cup√©ration si plus de 30 minutes se sont √©coul√©es
      return difference >= _recoveryInterval;
    } catch (e) {
      print('‚ùå Erreur lors de la v√©rification de la n√©cessit√© de r√©cup√©ration: $e');
      return true; // En cas d'erreur, on r√©cup√®re par pr√©caution
    }
  }

  /// R√©cup√®re proactivement les donn√©es utilisateur depuis l'API
  static Future<bool> performProactiveRecovery(String userId) async {
    try {
      print('üîÑ R√©cup√©ration proactive des donn√©es utilisateur pour: $userId');
      
      // V√©rifier si une r√©cup√©ration est n√©cessaire
      if (!await shouldPerformRecovery()) {
        print('‚ÑπÔ∏è R√©cup√©ration proactive non n√©cessaire (trop r√©cente)');
        return true;
      }

      // R√©cup√©rer le profil utilisateur depuis l'API
      final url = Uri.parse('$_baseUrl/user_profile?user_id=$userId');
      
      final response = await http.get(url).timeout(
        const Duration(seconds: 15),
        onTimeout: () {
          throw TimeoutException('Timeout lors de la r√©cup√©ration proactive');
        },
      );

      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        
        if (data['success'] == 'true' && data['data'] != null) {
          final userData = data['data'];
          
          // Extraire et sauvegarder les donn√©es
          final avatar = userData['user_avatar'];
          final name = userData['user_name'];
          
          if (avatar != null && avatar.isNotEmpty) {
            await _saveUserAvatar(avatar);
            print('‚úÖ Avatar utilisateur r√©cup√©r√© et sauvegard√©: ${avatar.substring(0, 20)}...');
          }
          
          if (name != null && name.isNotEmpty) {
            await _saveUserName(name);
            print('‚úÖ Nom utilisateur r√©cup√©r√© et sauvegard√©: $name');
          }
          
          // Marquer la r√©cup√©ration comme effectu√©e
          await _markRecoveryCompleted();
          
          print('‚úÖ R√©cup√©ration proactive termin√©e avec succ√®s');
          return true;
        } else {
          print('‚ö†Ô∏è R√©ponse API indique un √©chec: ${data['success']}');
          return false;
        }
      } else {
        print('‚ö†Ô∏è Erreur serveur lors de la r√©cup√©ration proactive: ${response.statusCode}');
        return false;
      }
    } catch (e) {
      print('‚ùå Erreur lors de la r√©cup√©ration proactive: $e');
      return false;
    }
  }

  /// Sauvegarde l'avatar utilisateur
  static Future<void> _saveUserAvatar(String avatarUrl) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.setString('user_avatar', avatarUrl);
      print('üíæ Avatar sauvegard√© localement');
    } catch (e) {
      print('‚ùå Erreur lors de la sauvegarde de l\'avatar: $e');
    }
  }

  /// Sauvegarde le nom utilisateur
  static Future<void> _saveUserName(String userName) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.setString('user_name', userName);
      print('üíæ Nom utilisateur sauvegard√© localement');
    } catch (e) {
      print('‚ùå Erreur lors de la sauvegarde du nom: $e');
    }
  }

  /// Marque la r√©cup√©ration comme termin√©e
  static Future<void> _markRecoveryCompleted() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.setString(_lastRecoveryKey, DateTime.now().toIso8601String());
      print('‚è∞ Timestamp de r√©cup√©ration mis √† jour');
    } catch (e) {
      print('‚ùå Erreur lors de la mise √† jour du timestamp: $e');
    }
  }

  /// Force une r√©cup√©ration proactive (ignorant l'intervalle)
  static Future<bool> forceProactiveRecovery(String userId) async {
    try {
      print('üîÑ R√©cup√©ration proactive forc√©e pour: $userId');
      
      // R√©cup√©rer le profil utilisateur depuis l'API
      final url = Uri.parse('$_baseUrl/user_profile?user_id=$userId');
      
      final response = await http.get(url).timeout(
        const Duration(seconds: 15),
        onTimeout: () {
          throw TimeoutException('Timeout lors de la r√©cup√©ration proactive forc√©e');
        },
      );

      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        
        if (data['success'] == 'true' && data['data'] != null) {
          final userData = data['data'];
          
          // Extraire et sauvegarder les donn√©es
          final avatar = userData['user_avatar'];
          final name = userData['user_name'];
          
          if (avatar != null && avatar.isNotEmpty) {
            await _saveUserAvatar(avatar);
            print('‚úÖ Avatar utilisateur r√©cup√©r√© et sauvegard√© (forc√©)');
          }
          
          if (name != null && name.isNotEmpty) {
            await _saveUserName(name);
            print('‚úÖ Nom utilisateur r√©cup√©r√© et sauvegard√© (forc√©)');
          }
          
          // Marquer la r√©cup√©ration comme effectu√©e
          await _markRecoveryCompleted();
          
          print('‚úÖ R√©cup√©ration proactive forc√©e termin√©e avec succ√®s');
          return true;
        } else {
          print('‚ö†Ô∏è R√©ponse API indique un √©chec: ${data['success']}');
          return false;
        }
      } else {
        print('‚ö†Ô∏è Erreur serveur lors de la r√©cup√©ration proactive forc√©e: ${response.statusCode}');
        return false;
      }
    } catch (e) {
      print('‚ùå Erreur lors de la r√©cup√©ration proactive forc√©e: $e');
      return false;
    }
  }

  /// Nettoie les donn√©es de r√©cup√©ration (pour la d√©connexion)
  static Future<void> clearRecoveryData() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.remove(_lastRecoveryKey);
      print('üßπ Donn√©es de r√©cup√©ration proactive supprim√©es');
    } catch (e) {
      print('‚ùå Erreur lors de la suppression des donn√©es de r√©cup√©ration: $e');
    }
  }

  /// R√©cup√®re le timestamp de la derni√®re r√©cup√©ration
  static Future<DateTime?> getLastRecoveryTime() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final lastRecovery = prefs.getString(_lastRecoveryKey);
      if (lastRecovery != null) {
        return DateTime.parse(lastRecovery);
      }
      return null;
    } catch (e) {
      print('‚ùå Erreur lors de la r√©cup√©ration du timestamp: $e');
      return null;
    }
  }
}
