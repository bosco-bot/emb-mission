import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:emb_mission/core/providers/radio_player_provider.dart';

/// Service centralis√© pour g√©rer la sortie de l'application
/// Emp√™che la fermeture accidentelle et g√®re les confirmations de sortie
class AppExitService {
  static final AppExitService _instance = AppExitService._internal();
  factory AppExitService() => _instance;
  AppExitService._internal();

  /// V√©rifie si l'utilisateur peut quitter l'application
  /// Retourne true si la sortie est autoris√©e, false sinon
  Future<bool> canExitApp(BuildContext context, WidgetRef ref) async {
    try {
      // 1. V√©rifier si la radio est en cours de lecture
      if (await _isRadioPlaying(ref)) {
        final shouldExit = await _showRadioPlayingExitDialog(context);
        if (!shouldExit) return false;
      }

      // 2. V√©rifier s'il y a des donn√©es non sauvegard√©es
      if (await _hasUnsavedData()) {
        final shouldExit = await _showUnsavedDataExitDialog(context);
        if (!shouldExit) return false;
      }

      // 3. V√©rifier s'il y a des t√©l√©chargements en cours
      if (await _hasActiveDownloads()) {
        final shouldExit = await _showDownloadsExitDialog(context);
        if (!shouldExit) return false;
      }

      // 4. V√©rifier s'il y a des t√¢ches en arri√®re-plan
      if (await _hasBackgroundTasks()) {
        final shouldExit = await _showBackgroundTasksExitDialog(context);
        if (!shouldExit) return false;
      }

      // Toutes les v√©rifications sont pass√©es, autoriser la sortie
      return true;
    } catch (e) {
      print('[APP_EXIT] ‚ùå Erreur lors de la v√©rification de sortie: $e');
      // En cas d'erreur, autoriser la sortie pour ne pas bloquer l'utilisateur
      return true;
    }
  }

  /// V√©rifie si la radio est en cours de lecture
  Future<bool> _isRadioPlaying(WidgetRef ref) async {
    try {
      // Utiliser le provider radio pour v√©rifier l'√©tat
      final radioPlaying = ref.read(radioPlayingProvider);
      final radioStopAll = ref.read(radioStopAllProvider);
      
      // La radio est en cours si radioPlaying est true ET radioStopAll est false
      final isPlaying = radioPlaying && !radioStopAll;
      
      print('[APP_EXIT] üìª √âtat radio - Playing: $radioPlaying, StopAll: $radioStopAll, IsPlaying: $isPlaying');
      
      return isPlaying;
    } catch (e) {
      print('[APP_EXIT] ‚ùå Erreur v√©rification radio: $e');
      return false;
    }
  }

  /// V√©rifie s'il y a des donn√©es non sauvegard√©es
  Future<bool> _hasUnsavedData() async {
    try {
      // V√©rifier les formulaires en cours d'√©dition
      // V√©rifier les commentaires non envoy√©s
      // V√©rifier les pr√©f√©rences non sauvegard√©es
      return false; // Placeholder - sera impl√©ment√© selon les besoins
    } catch (e) {
      print('[APP_EXIT] ‚ùå Erreur v√©rification donn√©es: $e');
      return false;
    }
  }

  /// V√©rifie s'il y a des t√©l√©chargements en cours
  Future<bool> _hasActiveDownloads() async {
    try {
      // V√©rifier les t√©l√©chargements de contenu
      // V√©rifier les mises √† jour en cours
      return false; // Placeholder - sera impl√©ment√© selon les besoins
    } catch (e) {
      print('[APP_EXIT] ‚ùå Erreur v√©rification t√©l√©chargements: $e');
      return false;
    }
  }

  /// V√©rifie s'il y a des t√¢ches en arri√®re-plan
  Future<bool> _hasBackgroundTasks() async {
    try {
      // V√©rifier la synchronisation des donn√©es
      // V√©rifier les notifications en cours
      return false; // Placeholder - sera impl√©ment√© selon les besoins
    } catch (e) {
      print('[APP_EXIT] ‚ùå Erreur v√©rification t√¢ches: $e');
      return false;
    }
  }

  /// Dialogue de confirmation si la radio est en cours de lecture
  Future<bool> _showRadioPlayingExitDialog(BuildContext context) async {
    return await showDialog<bool>(
      context: context,
      barrierDismissible: false,
      builder: (context) => AlertDialog(
        title: Row(
          children: [
            Icon(Icons.radio, color: Colors.orange),
            SizedBox(width: 8),
            Text('Radio en cours de lecture'),
          ],
        ),
        content: Text(
          'La radio est actuellement en cours de lecture. '
          'Voulez-vous vraiment quitter l\'application ?'
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(false),
            child: Text('Continuer √† √©couter'),
          ),
          TextButton(
            onPressed: () => Navigator.of(context).pop(true),
            style: TextButton.styleFrom(foregroundColor: Colors.red),
            child: Text('Quitter quand m√™me'),
          ),
        ],
      ),
    ) ?? false;
  }

  /// Dialogue de confirmation s'il y a des donn√©es non sauvegard√©es
  Future<bool> _showUnsavedDataExitDialog(BuildContext context) async {
    return await showDialog<bool>(
      context: context,
      barrierDismissible: false,
      builder: (context) => AlertDialog(
        title: Row(
          children: [
            Icon(Icons.save, color: Colors.blue),
            SizedBox(width: 8),
            Text('Donn√©es non sauvegard√©es'),
          ],
        ),
        content: Text(
          'Vous avez des donn√©es non sauvegard√©es. '
          'Voulez-vous vraiment quitter sans sauvegarder ?'
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(false),
            child: Text('Sauvegarder d\'abord'),
          ),
          TextButton(
            onPressed: () => Navigator.of(context).pop(true),
            style: TextButton.styleFrom(foregroundColor: Colors.red),
            child: Text('Quitter sans sauvegarder'),
          ),
        ],
      ),
    ) ?? false;
  }

  /// Dialogue de confirmation s'il y a des t√©l√©chargements en cours
  Future<bool> _showDownloadsExitDialog(BuildContext context) async {
    return await showDialog<bool>(
      context: context,
      barrierDismissible: false,
      builder: (context) => AlertDialog(
        title: Row(
          children: [
            Icon(Icons.download, color: Colors.green),
            SizedBox(width: 8),
            Text('T√©l√©chargements en cours'),
          ],
        ),
        content: Text(
          'Vous avez des t√©l√©chargements en cours. '
          'Voulez-vous vraiment quitter l\'application ?'
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(false),
            child: Text('Attendre la fin'),
          ),
          TextButton(
            onPressed: () => Navigator.of(context).pop(true),
            style: TextButton.styleFrom(foregroundColor: Colors.red),
            child: Text('Quitter quand m√™me'),
          ),
        ],
      ),
    ) ?? false;
  }

  /// Dialogue de confirmation s'il y a des t√¢ches en arri√®re-plan
  Future<bool> _showBackgroundTasksExitDialog(BuildContext context) async {
    return await showDialog<bool>(
      context: context,
      barrierDismissible: false,
      builder: (context) => AlertDialog(
        title: Row(
          children: [
            Icon(Icons.sync, color: Colors.purple),
            SizedBox(width: 8),
            Text('T√¢ches en cours'),
          ],
        ),
        content: Text(
          'Des t√¢ches sont en cours d\'ex√©cution en arri√®re-plan. '
          'Voulez-vous vraiment quitter l\'application ?'
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(false),
            child: Text('Attendre la fin'),
          ),
          TextButton(
            onPressed: () => Navigator.of(context).pop(true),
            style: TextButton.styleFrom(foregroundColor: Colors.red),
            child: Text('Quitter quand m√™me'),
          ),
        ],
      ),
    ) ?? false;
  }

  /// M√©thode pour forcer la sortie (utilis√©e dans les cas d'urgence)
  Future<bool> forceExit(BuildContext context) async {
    print('[APP_EXIT] üö® Sortie forc√©e de l\'application');
    return true;
  }
}

/// Provider pour le service de sortie d'application
final appExitServiceProvider = Provider<AppExitService>((ref) {
  return AppExitService();
});
