import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:audioplayers/audioplayers.dart';
import 'package:hive_flutter/hive_flutter.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';
import 'dart:io';
import 'package:path_provider/path_provider.dart';
import 'package:emb_mission/core/data/local_models.dart';

import 'package:emb_mission/core/router/app_router.dart';
import 'package:emb_mission/core/theme/app_theme.dart';
import 'package:emb_mission/core/services/preferences_service.dart';
import 'package:emb_mission/core/services/shared_preferences_provider.dart';
import 'package:emb_mission/core/services/auth_service.dart';
import 'package:emb_mission/core/services/app_usage_service.dart';
import 'package:emb_mission/core/services/notification_service.dart';
import 'package:emb_mission/core/services/proactive_data_recovery_service.dart';
import 'package:emb_mission/features/onboarding/presentation/screens/welcome_screen.dart';
import 'package:audio_service/audio_service.dart';
import 'package:emb_mission/core/services/audio_service_handler.dart';
import 'package:emb_mission/core/widgets/app_exit_protection.dart';
import 'package:emb_mission/core/widgets/guest_activity_tracker.dart';
import 'package:emb_mission/core/widgets/user_activity_tracker.dart';
import 'package:emb_mission/core/services/monitoring_service.dart';
import 'package:emb_mission/core/services/background_maintenance_service.dart';
import 'package:emb_mission/core/services/notification_control_service.dart';
import 'package:emb_mission/core/services/radio_sync_monitor.dart';
import 'package:emb_mission/core/providers/radio_player_provider.dart' as radio_provider;
import 'package:firebase_crashlytics/firebase_crashlytics.dart';
import 'package:firebase_analytics/firebase_analytics.dart';
import 'package:flutter/foundation.dart';
import 'package:emb_mission/core/config/app_config.dart';

// ‚úÖ NOUVEAU: Configuration du monitoring Firebase
Future<void> _configureFirebaseMonitoring() async {
  try {
    AppConfig.log('Configuration du monitoring Firebase...', tag: 'FIREBASE');
    
    // 1. ‚úÖ Activer Crashlytics (toujours utile)
    if (AppConfig.shouldEnableFirebaseCrashlytics) {
      await FirebaseCrashlytics.instance.setCrashlyticsCollectionEnabled(true);
      AppConfig.logSuccess('Firebase Crashlytics activ√©', tag: 'FIREBASE');
    }
    
    // 2. ‚úÖ Analytics conditionnel selon l'environnement
    if (AppConfig.shouldEnableFirebaseAnalytics) {
      // ‚úÖ PRODUCTION: Activer Analytics pour collecter de vraies donn√©es
      await FirebaseAnalytics.instance.setAnalyticsCollectionEnabled(true);
      AppConfig.logSuccess('Firebase Analytics activ√© (PRODUCTION)', tag: 'FIREBASE');
    } else {
      // ‚úÖ D√âVELOPPEMENT: D√©sactiver Analytics pour √©viter les crashes
      await FirebaseAnalytics.instance.setAnalyticsCollectionEnabled(false);
      AppConfig.logWarning('Firebase Analytics d√©sactiv√© (D√âVELOPPEMENT)', tag: 'FIREBASE');
    }
    
    // 3. ‚úÖ Configurer le handler d'erreurs Flutter
    FlutterError.onError = FirebaseCrashlytics.instance.recordFlutterFatalError;
    
    // 4. ‚úÖ Configurer le handler d'erreurs non fatales
    PlatformDispatcher.instance.onError = (error, stack) {
      FirebaseCrashlytics.instance.recordError(error, stack, fatal: false);
      return true;
    };
    
    AppConfig.logSuccess('Monitoring Firebase configur√© avec succ√®s', tag: 'FIREBASE');
    
  } catch (e) {
    AppConfig.logError('Erreur configuration monitoring Firebase', tag: 'FIREBASE', error: e);
    // Continuer sans monitoring
  }
}

// Configuration du handler de messages en arri√®re-plan
@pragma('vm:entry-point')
Future<void> _firebaseMessagingBackgroundHandler(RemoteMessage message) async {
  print('üì® Message re√ßu en arri√®re-plan (main.dart): ${message.notification?.title}');
  
  // Sauvegarder la notification dans un fichier pour qu'elle soit trait√©e quand l'app s'ouvre
  try {
    // Utiliser le r√©pertoire des documents de l'application (partag√© entre processus)
    final appDir = await getApplicationDocumentsDirectory();
    final notificationsFile = File('${appDir.path}/pending_notifications.json');
    
    // Lire les notifications existantes
    List<Map<String, dynamic>> notifications = [];
    if (await notificationsFile.exists()) {
      try {
        final content = await notificationsFile.readAsString();
        final List<dynamic> jsonList = jsonDecode(content);
        notifications = jsonList.cast<Map<String, dynamic>>();
      } catch (e) {
        print('üîç DEBUG: Erreur lecture fichier existant, cr√©ation nouvelle liste');
        notifications = [];
      }
    }
    
    // Ajouter la nouvelle notification
    final notificationData = {
      'title': message.notification?.title ?? '',
      'body': message.notification?.body ?? '',
      'timestamp': DateTime.now().millisecondsSinceEpoch.toString(),
    };
    
    notifications.add(notificationData);
    
    // Sauvegarder dans le fichier
    await notificationsFile.writeAsString(jsonEncode(notifications));
    
    print('üîç DEBUG: Notification sauvegard√©e dans fichier: ${appDir.path}/pending_notifications.json');
    print('üîç DEBUG: Nombre total de notifications en attente: ${notifications.length}');
    print('‚úÖ Notification en arri√®re-plan sauvegard√©e (main.dart): ${message.notification?.title}');
    
    // V√©rifier que le fichier a bien √©t√© cr√©√©
    final fileExists = await notificationsFile.exists();
    print('üîç DEBUG: Fichier cr√©√© avec succ√®s: $fileExists');
    
  } catch (e) {
    print('‚ùå Erreur sauvegarde notification arri√®re-plan (main.dart): $e');
    print('‚ùå Stack trace: ${StackTrace.current}');
  }
}

/// Widget pour initialiser le service de notifications avec le ProviderContainer
class NotificationServiceInitializer extends ConsumerStatefulWidget {
  final Widget child;
  
  const NotificationServiceInitializer({required this.child, super.key});

  @override
  ConsumerState<NotificationServiceInitializer> createState() => _NotificationServiceInitializerState();
}

class _NotificationServiceInitializerState extends ConsumerState<NotificationServiceInitializer> {
  @override
  void initState() {
    super.initState();
    // Initialiser le service de notifications avec la fonction read
    WidgetsBinding.instance.addPostFrameCallback((_) {
      NotificationService.initialize(ref.read);
    });
  }

  @override
  Widget build(BuildContext context) {
    return widget.child;
  }
}

class AppLifecycleReactor extends StatefulWidget {
  final Widget child;
  const AppLifecycleReactor({required this.child, super.key});

  @override
  State<AppLifecycleReactor> createState() => _AppLifecycleReactorState();
}

class _AppLifecycleReactorState extends State<AppLifecycleReactor> with WidgetsBindingObserver {
  DateTime? _lastPauseTime;
  bool _isFirstLaunch = true; // ‚úÖ NOUVEAU: Flag pour d√©tecter le lancement initial
  
  @override
  void initState() {
    super.initState();
    WidgetsBinding.instance.addObserver(this);
    AppUsageService.startSession();
    print('üöÄ Application initialis√©e - Premier lancement: $_isFirstLaunch');
  }

  @override
  void dispose() {
    WidgetsBinding.instance.removeObserver(this);
    AppUsageService.endSession();
    super.dispose();
  }

  @override
  void didChangeAppLifecycleState(AppLifecycleState state) {
    print('üîÑ AppLifecycleState changed: $state');
    
    switch (state) {
      case AppLifecycleState.resumed:
        AppUsageService.startSession();
        
        // ‚úÖ CORRECTION: Ne pas d√©marrer le service au lancement initial
        if (_isFirstLaunch) {
          print('üöÄ Premier lancement d√©tect√© - Service de maintenance NON d√©marr√©');
          _isFirstLaunch = false;
        } else {
          // ‚úÖ CORRECTION: Ne pas d√©marrer le service automatiquement
          // Le service sera d√©marr√© seulement quand l'utilisateur va sur la page radio
          print('‚úÖ App revenue au premier plan - Service de maintenance NON d√©marr√© automatiquement');
        }
        break;
        
      case AppLifecycleState.paused:
        print('‚è∏Ô∏è App mise en pause - maintien en arri√®re-plan');
        // ‚úÖ CRITIQUE: Ne pas arr√™ter le service de maintien
        // L'app doit rester active en arri√®re-plan
        _lastPauseTime = DateTime.now();
        print('‚è∞ Temps de pause enregistr√©: $_lastPauseTime');
        break;
        
      case AppLifecycleState.inactive:
        print('üîÑ App inactive - transition en cours');
        break;
        
      case AppLifecycleState.hidden:
        print('üëÅÔ∏è App cach√©e - maintien en arri√®re-plan');
        break;
        
      case AppLifecycleState.detached:
        print('üö™ App d√©tach√©e - V√âRIFICATION si fermeture r√©elle ou simple retour');
        
        // ‚úÖ NOUVEAU: V√©rifier si c'est une vraie fermeture ou juste un retour
        if (_isRealAppExit()) {
          print('üö™ Fermeture r√©elle de l\'app d√©tect√©e');
          AppUsageService.endSession();
          BackgroundMaintenanceService().stop();
          _performProactiveDataRecovery();
        } else {
          print('‚è∏Ô∏è Simple retour en arri√®re-plan - maintien des services');
          // Garder les services actifs
        }
        break;
    }
  }

  /// ‚úÖ NOUVEAU: D√©termine si c'est une vraie fermeture ou un simple retour
  bool _isRealAppExit() {
    // Si l'app est en arri√®re-plan depuis moins de 30 secondes, 
    // c'est probablement un simple retour, pas une fermeture
    final now = DateTime.now();
    final timeSincePause = now.difference(_lastPauseTime ?? now);
    
    // Si moins de 30 secondes depuis la pause, c'est un retour
    if (timeSincePause.inSeconds < 30) {
      print('‚è∏Ô∏è D√©tect√© comme retour en arri√®re-plan (${timeSincePause.inSeconds}s)');
      return false;
    }
    
    print('üö™ D√©tect√© comme fermeture r√©elle (${timeSincePause.inSeconds}s)');
    return true;
  }

  /// ‚úÖ NOUVEAU: Effectue la r√©cup√©ration proactive des donn√©es utilisateur
  Future<void> _performProactiveDataRecovery() async {
    try {
      // V√©rifier si un utilisateur est connect√©
      final prefs = await SharedPreferences.getInstance();
      final userId = prefs.getString('user_id');
      
      if (userId != null && userId.isNotEmpty) {
        print('üîÑ App en pause/fermeture - R√©cup√©ration proactive des donn√©es utilisateur');
        
        // Effectuer la r√©cup√©ration proactive
        await ProactiveDataRecoveryService.performProactiveRecovery(userId);
        
        print('‚úÖ R√©cup√©ration proactive termin√©e avant fermeture de l\'app');
      } else {
        print('‚ÑπÔ∏è Aucun utilisateur connect√© - Pas de r√©cup√©ration proactive n√©cessaire');
      }
    } catch (e) {
      print('‚ùå Erreur lors de la r√©cup√©ration proactive: $e');
    }
  }

  @override
  Widget build(BuildContext context) => widget.child;
}

Future<void> syncLocalDataToBackend(String userId) async {
  final favBox = Hive.box('favorites');
  final progressBox = Hive.box('progress');
  final commentsBox = Hive.box('comments');

  // Sync favoris
  for (var fav in favBox.values) {
    if (fav is LocalFavorite && fav.needsSync) {
      // On tente de r√©cup√©rer la dur√©e depuis la progression locale si dispo
      final prog = progressBox.values.cast<LocalProgress?>().firstWhere(
        (p) => p?.contentId == fav.contentId,
        orElse: () => null,
      );
      final duration = prog?.position ?? 0;
      final url = Uri.parse('https://embmission.com/mobileappebm/api/save_delete_favorie_contents?idcontents=${fav.contentId}&userId=$userId&duration=$duration');
      try {
        final response = await http.get(url);
        if (response.statusCode == 200) {
          fav.needsSync = false;
          await fav.save();
        }
      } catch (_) {}
    }
  }

  // Sync progression
  for (var prog in progressBox.values) {
    if (prog is LocalProgress && prog.needsSync) {
      final duration = prog.position; // Ici, on suppose que la dur√©e totale est stock√©e dans position (√† ajuster si tu as la vraie dur√©e)
      final url = Uri.parse('https://embmission.com/mobileappebm/api/save_listens_contents?userId=$userId&contentId=${prog.contentId}&position=${prog.position}&duration=$duration');
      try {
        final response = await http.get(url);
        if (response.statusCode == 200) {
          prog.needsSync = false;
          await prog.save();
        }
      } catch (_) {}
    }
  }

  // Sync commentaires
  for (var comment in commentsBox.values) {
    if (comment is LocalComment && comment.needsSync) {
      try {
        final response = await http.post(
          Uri.parse('https://embmission.com/mobileappebm/api/save_contents_comments'),
          headers: {'Content-Type': 'application/json'},
          body: jsonEncode({
            'idcontents': comment.contentId,
            'id_user': userId,
            'contentscomments': comment.text,
          }),
        );
        if (response.statusCode == 200) {
          final data = jsonDecode(response.body);
          if (data['success'] == 'true') {
            comment.needsSync = false;
            await comment.save();
            print('[SYNC] Commentaire synchronis√©: ${comment.text}');
          }
        }
      } catch (e) {
        print('[SYNC] Erreur synchronisation commentaire: $e');
      }
    }
  }
}

void main() async {
  print('Lancement de MON projet EBM');
  WidgetsFlutterBinding.ensureInitialized();
  
  // Initialiser Firebase avec gestion d'erreur
  try {
    await Firebase.initializeApp();
    
    // ‚úÖ NOUVEAU: Configuration du monitoring Firebase
    await _configureFirebaseMonitoring();
    
    // ‚úÖ NOUVEAU: Initialiser le service de monitoring
    await MonitoringService.initialize();
    
    // Configurer le handler de messages en arri√®re-plan
    FirebaseMessaging.onBackgroundMessage(_firebaseMessagingBackgroundHandler);
    
    print('‚úÖ Firebase initialis√© avec succ√®s');
  } catch (e) {
    print('‚ùå Erreur Firebase (non critique): $e');
    // Continuer sans Firebase
  }

  // Initialiser AudioService pour la lecture en arri√®re-plan
  try {
    await AudioService.init(
      builder: () => RadioAudioHandler(),
      config: const AudioServiceConfig(
        androidNotificationChannelId: 'com.embmission.radio',
        androidNotificationChannelName: 'EMB-Mission Radio',
        androidNotificationOngoing: false,
        // ‚úÖ CRITIQUE: Ne pas arr√™ter le service en arri√®re-plan
        androidStopForegroundOnPause: false,
        androidResumeOnClick: true,
        androidNotificationIcon: 'mipmap/ic_launcher',
        notificationColor: const Color(0xFF2196F3),
      ),
    );
    print('‚úÖ AudioService initialis√© avec succ√®s - configuration optimis√©e pour l\'arri√®re-plan');
  } catch (e) {
    print('‚ùå Erreur AudioService (non critique): $e');
    // Continuer sans AudioService
  }
  
  // Initialiser les pr√©f√©rences partag√©es
  final prefs = await SharedPreferences.getInstance();
  
  // V√©rifier l'√©tat de l'onboarding (normalement false √† la premi√®re installation)
  final onboardingCompleted = prefs.getBool('onboarding_completed') ?? false;
  print('√âtat de l\'onboarding : $onboardingCompleted');
  
  // Afficher le statut de l'onboarding
  if (!onboardingCompleted) {
    print('üÜï Premi√®re installation - OnboardingScreen va s\'afficher');
  } else {
    print('üì± Installation existante - OnboardingScreen d√©j√† compl√©t√©');
  }
  
  // Initialiser l'√©tat d'authentification si l'utilisateur est d√©j√† connect√©
  final savedUserId = prefs.getString('user_id');
  if (savedUserId != null && savedUserId.isNotEmpty) {
    print('‚úÖ Utilisateur d√©j√† connect√© d√©tect√©: $savedUserId');
  } else {
    print('‚ÑπÔ∏è Aucun utilisateur connect√© d√©tect√©');
  }

  await Hive.initFlutter();
  Hive.registerAdapter(LocalFavoriteAdapter());
  Hive.registerAdapter(LocalProgressAdapter());
  Hive.registerAdapter(LocalCommentAdapter());
  await Hive.openBox('favorites');
  await Hive.openBox('progress');
  await Hive.openBox('comments');
  
  // Initialiser les services de contr√¥le
  // NotificationControlService().initialize(); // N√©cessite un WidgetRef
  
  // ‚úÖ D√âSACTIV√â: Moniteur de synchronisation radio D√âSACTIV√â au d√©marrage de l'app
  // (pour √©viter le d√©marrage automatique du service Android et de la notification radio)
  print('üîß [MAIN] ‚úÖ Moniteur de synchronisation radio D√âSACTIV√â au d√©marrage de l\'app');
  // final radioSyncMonitor = RadioSyncMonitor();
  // radioSyncMonitor.startMonitoring(); // ‚Üê D√âSACTIV√â
  print('üîß [MAIN] ‚úÖ Moniteur de synchronisation radio D√âSACTIV√â (√©vite la notification radio)');
  
  runApp(
    ProviderScope(
      overrides: [
        // Fournir l'instance de SharedPreferences √† l'application
        sharedPreferencesProvider.overrideWithValue(prefs),
      ],
      child: NotificationServiceInitializer(
        child: AppLifecycleReactor(
          child: const MyApp(),
        ),
      ),
    ),
  );
}



/// Provider pour le th√®me de l'application
final themeProvider = StateProvider<ThemeMode>((ref) {
  final preferencesService = ref.watch(preferencesServiceProvider);
  return preferencesService.isDarkMode() ? ThemeMode.dark : ThemeMode.light;
});

class MyApp extends ConsumerWidget {
  const MyApp({super.key});

  /// ‚úÖ NOUVEAU: Restaure imm√©diatement les donn√©es proactives
  Future<void> _restoreProactiveData() async {
    try {
      print('üîÑ Restauration imm√©diate des donn√©es proactives...');
      
      // V√©rifier si un utilisateur est connect√©
      final prefs = await SharedPreferences.getInstance();
      final userId = prefs.getString('user_id');
      
      if (userId != null && userId.isNotEmpty) {
        // V√©rifier si des donn√©es proactives sont disponibles
        final lastRecovery = await ProactiveDataRecoveryService.getLastRecoveryTime();
        
        if (lastRecovery != null) {
          final difference = DateTime.now().difference(lastRecovery);
          
          // Si la r√©cup√©ration date de moins de 2 heures, les donn√©es sont consid√©r√©es fra√Æches
          if (difference.inHours < 2) {
            print('‚úÖ Donn√©es proactives r√©centes disponibles (${difference.inMinutes} minutes)');
            print('üìä Avatar et nom utilisateur restaur√©s imm√©diatement');
          } else {
            print('‚ÑπÔ∏è Donn√©es proactives expir√©es (${difference.inHours} heures)');
            print('üîÑ R√©cup√©ration en arri√®re-plan n√©cessaire');
          }
        } else {
          print('‚ÑπÔ∏è Aucune donn√©e proactive disponible');
        }
      } else {
        print('‚ÑπÔ∏è Aucun utilisateur connect√© - Pas de restauration n√©cessaire');
      }
    } catch (e) {
      print('‚ùå Erreur lors de la restauration des donn√©es proactives: $e');
    }
  }

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    // ‚úÖ NOUVEAU: Initialiser le service de contr√¥le de notification
    NotificationControlService.instance.initialize(ref);
    
    // V√©rifier si les pr√©f√©rences sont initialis√©es
    final prefsState = ref.watch(preferencesServiceInitProvider);
    // Initialiser l'√©tat d'authentification
    final authState = ref.watch(authInitializerProvider);
    
    return prefsState.when(
      data: (_) => authState.when(
        data: (_) => _buildApp(context, ref),
        loading: () => MaterialApp(
          home: Scaffold(
            body: Center(
              child: CircularProgressIndicator(),
            ),
          ),
        ),
        error: (error, stack) => MaterialApp(
          home: Scaffold(
            body: Center(
              child: Text('Erreur d\'authentification: $error'),
            ),
          ),
        ),
      ),
      loading: () => MaterialApp(
        home: Scaffold(
          body: Center(
            child: CircularProgressIndicator(),
          ),
        ),
      ),
      error: (error, stack) => MaterialApp(
        home: Scaffold(
          body: Center(
            child: Text('Erreur de chargement: $error'),
          ),
        ),
      ),
    );
  }
  
  Widget _buildApp(BuildContext context, WidgetRef ref) {
    // R√©cup√©rer le routeur
    final router = ref.watch(appRouterProvider);
    
    // R√©cup√©rer le mode de th√®me
    final themeMode = ref.watch(themeProvider);

      // ‚úÖ R√âCUP√âRATION AUTOMATIQUE: D√©clencher la r√©cup√©ration des donn√©es utilisateur
  ref.watch(userDataRecoveryProvider);
  
  // ‚úÖ NOUVEAU: Restauration imm√©diate des donn√©es proactives
  _restoreProactiveData();
  
  // ‚úÖ D√âSACTIV√â: Service de maintien en arri√®re-plan D√âSACTIV√â au d√©marrage de l'app
  // (pour √©viter le d√©marrage automatique du service Android et de la notification radio)
  // WidgetsBinding.instance.addPostFrameCallback((_) {
  //   BackgroundMaintenanceService().start(); // ‚Üê D√âSACTIV√â
  // });

  // ‚úÖ NOUVEAU: Arr√™ter forc√©ment la radio au d√©marrage de l'app pour √©viter la notification
  WidgetsBinding.instance.addPostFrameCallback((_) async {
    try {
      print('üö® [MAIN] Arr√™t forc√© de la radio au d√©marrage de l\'app...');
      
      // Importer le provider de la radio
      final radioProvider = ref.read(radio_provider.radioPlayingProvider.notifier);
      
      // Arr√™ter forc√©ment la radio
      await radioProvider.forceStopRadioOnAppStart();
      
      print('‚úÖ [MAIN] Radio arr√™t√©e avec succ√®s au d√©marrage de l\'app');
      
    } catch (e) {
      print('‚ùå [MAIN] Erreur lors de l\'arr√™t forc√© de la radio: $e');
    }
  });

    return AppExitProtection(
      child: UserActivityTracker(
        child: GuestActivityTracker(
          child: NotificationServiceInitializer(
            child: MaterialApp.router(
              title: 'EMB-Mission',
              debugShowCheckedModeBanner: false,
              
              // Configuration du routeur
              routerConfig: router,
              
              // Th√®me clair
              theme: ThemeData(
                useMaterial3: true,
                colorScheme: AppTheme.lightColorScheme,
                textTheme: GoogleFonts.poppinsTextTheme(ThemeData.light().textTheme),
                appBarTheme: AppTheme.appBarTheme,
                cardTheme: AppTheme.cardTheme,
                elevatedButtonTheme: AppTheme.elevatedButtonTheme,
                outlinedButtonTheme: AppTheme.outlinedButtonTheme,
                bottomNavigationBarTheme: AppTheme.bottomNavBarTheme,
              ),
              
              // Th√®me sombre
              darkTheme: ThemeData(
                useMaterial3: true,
                colorScheme: AppTheme.darkColorScheme,
                textTheme: GoogleFonts.poppinsTextTheme(ThemeData.dark().textTheme),
                appBarTheme: AppTheme.darkAppBarTheme,
                cardTheme: AppTheme.darkCardTheme,
                elevatedButtonTheme: AppTheme.elevatedButtonTheme,
                outlinedButtonTheme: AppTheme.outlinedButtonTheme,
                bottomNavigationBarTheme: AppTheme.darkBottomNavBarTheme,
              ),
              
              // Mode de th√®me actuel
              themeMode: themeMode,
            ),
          ),
        ),
      ),
    );
  }
}
